spring.datasource.url=jdbc:postgresql://localhost:5432/Ubernet
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.username=postgres
spring.datasource.password=root

spring.devtools.remote.secret="secret"
server.port=8000

spring.profiles.active=dev

spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation= true
spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.PostgreSQL95Dialect

spring.mvc.pathmatch.matching-strategy=ant_path_matcher


spring.mail.host = smtp.office365.com
spring.mail.username = ubernet-test@outlook.com
spring.mail.password = ubernet123
spring.mail.port=587
spring.mail.properties.mail.smtp.starttls.enable = true

spring.mvc.view.prefix:/WEB-INF/jsp/
spring.mvc.view.suffix:.jsp

spring.servlet.multipart.max-file-size=100MB
spring.servlet.multipart.max-request-size=100MB


spring.jpa.hibernate.ddl-auto=create-drop
spring.sql.init.data-locations= classpath:/data-postgres.sql
spring.sql.init.mode=always
spring.jpa.defer-datasource-initialization=true

spring.cache.jcache.config=classpath:ehcache.xml

spring.jpa.open-in-view=false
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true

#google
spring.security.oauth2.client.registration.google.clientId=263337550240-ilitbfe2sqc3v0vlc61tiuu5bb3no8f6.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.clientSecret=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
spring.security.oauth2.client.registration.google.scope=email, profile

#google.id=263337550240-ilitbfe2sqc3v0vlc61tiuu5bb3no8f6.apps.googleusercontent.com
#mySecret.password=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

#paypal
paypal.mode=sandbox
paypal.client.id=ARFegai-hf1Q5PxFg8tDHYQc_JCtFomkQT7Kz6egImsQdzT4SWLeU02kdXd4ElvAlcqV-sRYtj2uC4ww
paypal.client.secret=EPIJUzkcvyI5ZuqC2N37kag0izsicr8k9mg0lPzpp-69pRepk2YtevTi_7SH3954SXTF1Hvki8LjcRC-


#app.auth.tokenSecret=926D96C90030DD58429D2751AC1BDBBC
#app.auth.tokenExpirationMsec=864000000
## After successfully authenticating with the OAuth2 Provider,
## we'll be generating an auth token for the user and sending the token to the
## redirectUri mentioned by the frontend client in the /oauth2/authorization request.
## We're not using cookies because they won't work well in mobile clients.
#app.oauth2.authorizedRedirectUris=http://localhost:9000/oauth2/redirect,myandroidapp://oauth2/redirect,myiosapp://oauth2/redirect
## For detailed logging during development
##logging.level.com=TRACE
#logging.level.org.springframework=TRACE
##logging.level.org.hibernate.SQL=TRACE
##logging.level.org.hibernate.type=TRACE
