{"version":3,"file":"actions-stream.d.ts","sources":["actions-stream.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Subject, Observable } from 'rxjs';\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\n/**\n * Status of a dispatched action\n */\nexport declare const enum ActionStatus {\n    Dispatched = \"DISPATCHED\",\n    Successful = \"SUCCESSFUL\",\n    Canceled = \"CANCELED\",\n    Errored = \"ERRORED\"\n}\nexport interface ActionContext<T = any> {\n    status: ActionStatus;\n    action: T;\n    error?: Error;\n}\n/**\n * Custom Subject that ensures that subscribers are notified of values in the order that they arrived.\n * A standard Subject does not have this guarantee.\n * For example, given the following code:\n * ```typescript\n *   const subject = new Subject<string>();\n     subject.subscribe(value => {\n       if (value === 'start') subject.next('end');\n     });\n     subject.subscribe(value => { });\n     subject.next('start');\n * ```\n * When `subject` is a standard `Subject<T>` the second subscriber would recieve `end` and then `start`.\n * When `subject` is a `OrderedSubject<T>` the second subscriber would recieve `start` and then `end`.\n */\nexport declare class OrderedSubject<T> extends Subject<T> {\n    private _itemQueue;\n    private _busyPushingNext;\n    next(value?: T): void;\n}\n/**\n * Internal Action stream that is emitted anytime an action is dispatched.\n */\nexport declare class InternalActions extends OrderedSubject<ActionContext> {\n}\n/**\n * Action stream that is emitted anytime an action is dispatched.\n *\n * You can listen to this in services to react without stores.\n */\nexport declare class Actions extends Observable<any> {\n    constructor(internalActions$: InternalActions, internalExecutionStrategy: InternalNgxsExecutionStrategy);\n}\n"]}