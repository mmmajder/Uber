{"version":3,"file":"state-factory.d.ts","sources":["state-factory.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Injector, OnDestroy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { NgxsConfig } from '../symbols';\nimport { MappedStore, StateClassInternal, StatesAndDefaults, StatesByName, RuntimeSelectorContext } from './internals';\nimport { ActionContext, InternalActions } from '../actions-stream';\nimport { InternalDispatchedActionResults } from '../internal/dispatcher';\nimport { StateContextFactory } from '../internal/state-context-factory';\n/**\n * State factory class\n * @ignore\n */\nexport declare class StateFactory implements OnDestroy {\n    private _injector;\n    private _config;\n    private _parentFactory;\n    private _actions;\n    private _actionResults;\n    private _stateContextFactory;\n    private _initialState;\n    private _actionsSubscription;\n    constructor(_injector: Injector, _config: NgxsConfig, _parentFactory: StateFactory, _actions: InternalActions, _actionResults: InternalDispatchedActionResults, _stateContextFactory: StateContextFactory, _initialState: any);\n    private _states;\n    readonly states: MappedStore[];\n    private _statesByName;\n    readonly statesByName: StatesByName;\n    private _statePaths;\n    private readonly statePaths;\n    getRuntimeSelectorContext: () => RuntimeSelectorContext;\n    private static cloneDefaults;\n    ngOnDestroy(): void;\n    /**\n     * Add a new state to the global defs.\n     */\n    add(stateClasses: StateClassInternal[]): MappedStore[];\n    /**\n     * Add a set of states to the store and return the defaults\n     */\n    addAndReturnDefaults(stateClasses: StateClassInternal[]): StatesAndDefaults;\n    /**\n     * Bind the actions to the handlers\n     */\n    connectActionHandlers(): void;\n    /**\n     * Invoke actions on the states.\n     */\n    invokeActions(dispatched$: Observable<ActionContext>, action: any): Observable<{}[]>;\n    private addToStatesMap;\n    private addRuntimeInfoToMeta;\n    /**\n     * @description\n     * the method checks if the state has already been added to the tree\n     * and completed the life cycle\n     * @param name\n     * @param path\n     */\n    private hasBeenMountedAndBootstrapped;\n}\n"]}