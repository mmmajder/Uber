{"version":3,"file":"dispatcher.d.ts","sources":["dispatcher.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Injector } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { ActionContext, InternalActions } from '../actions-stream';\nimport { StateStream } from './state-stream';\nimport { PluginManager } from '../plugin-manager';\nimport { InternalNgxsExecutionStrategy } from '../execution/internal-ngxs-execution-strategy';\n/**\n * Internal Action result stream that is emitted when an action is completed.\n * This is used as a method of returning the action result to the dispatcher\n * for the observable returned by the dispatch(...) call.\n * The dispatcher then asynchronously pushes the result from this stream onto the main action stream as a result.\n */\nexport declare class InternalDispatchedActionResults extends Subject<ActionContext> {\n}\nexport declare class InternalDispatcher {\n    private _injector;\n    private _actions;\n    private _actionResults;\n    private _pluginManager;\n    private _stateStream;\n    private _ngxsExecutionStrategy;\n    private _errorHandler;\n    constructor(_injector: Injector, _actions: InternalActions, _actionResults: InternalDispatchedActionResults, _pluginManager: PluginManager, _stateStream: StateStream, _ngxsExecutionStrategy: InternalNgxsExecutionStrategy);\n    /**\n     * Dispatches event(s).\n     */\n    dispatch(actionOrActions: any | any[]): Observable<any>;\n    private dispatchByEvents;\n    private dispatchSingle;\n    private getActionResultStream;\n    private createDispatchObservable;\n}\n"]}