{"version":3,"file":"ngxs-store.js","sources":["@ngxs/store/src/configs/messages.config.ts","@ngxs/store/src/execution/dispatch-outside-zone-ngxs-execution-strategy.ts","@ngxs/store/src/symbols.ts","@ngxs/store/src/execution/noop-ngxs-execution-strategy.ts","@ngxs/store/src/execution/symbols.ts","@ngxs/store/src/utils/utils.ts","@ngxs/store/src/internal/internals.ts","@ngxs/store/src/operators/of-action.ts","@ngxs/store/src/operators/leave-ngxs.ts","@ngxs/store/src/execution/internal-ngxs-execution-strategy.ts","@ngxs/store/src/actions-stream.ts","@ngxs/store/src/utils/compose.ts","@ngxs/store/src/internal/state-stream.ts","@ngxs/store/src/plugin-manager.ts","@ngxs/store/src/internal/dispatcher.ts","@ngxs/store/src/utils/freeze.ts","@ngxs/store/src/internal/state-operations.ts","@ngxs/store/src/internal/state-operators.ts","@ngxs/store/src/internal/state-context-factory.ts","@ngxs/store/src/utils/store-validators.ts","@ngxs/store/src/ivy/ivy-enabled-in-dev-mode.ts","@ngxs/store/src/internal/state-factory.ts","@ngxs/store/src/internal/lifecycle-state-manager.ts","@ngxs/store/src/utils/selector-utils.ts","@ngxs/store/src/store.ts","@ngxs/store/src/decorators/select/select-factory.ts","@ngxs/store/src/actions/actions.ts","@ngxs/store/src/modules/ngxs-root.module.ts","@ngxs/store/src/modules/ngxs-feature.module.ts","@ngxs/store/src/module.ts","@ngxs/store/src/decorators/action.ts","@ngxs/store/src/decorators/state.ts","@ngxs/store/src/decorators/select/symbols.ts","@ngxs/store/src/decorators/select/select.ts","@ngxs/store/src/decorators/selector-options.ts","@ngxs/store/src/public_to_deprecate.ts","@ngxs/store/src/decorators/selector/selector.ts","@ngxs/store/src/state-token/state-token.ts"],"names":["isObject","MetaDataModel","SelectorMetaDataModel","ensureStoreMetadata","ensureStoreMetadataInternal","getStoreMetadata","getStoreMetadataInternal","ensureSelectorMetadata","ensureSelectorMetadataInternal","getSelectorMetadata","getSelectorMetadataInternal"],"mappings":"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","sourcesContent":["export function throwStateNameError(name: string): never {\n  throw new Error(\n    `${name} is not a valid state name. It needs to be a valid object property name.`\n  );\n}\n\nexport function throwStateNamePropertyError(): never {\n  throw new Error(`States must register a 'name' property.`);\n}\n\nexport function throwStateUniqueError(\n  current: string,\n  newName: string,\n  oldName: string\n): never {\n  throw new Error(`State name '${current}' from ${newName} already exists in ${oldName}.`);\n}\n\nexport function throwStateDecoratorError(name: string): never {\n  throw new Error(`States must be decorated with @State() decorator, but \"${name}\" isn't.`);\n}\n\nexport function throwActionDecoratorError(): never {\n  throw new Error('@Action() decorator cannot be used with static methods.');\n}\n\nexport function throwSelectorDecoratorError(): never {\n  throw new Error('Selectors only work on methods.');\n}\n\nexport function getZoneWarningMessage(): string {\n  return (\n    'Your application was bootstrapped with nooped zone and your execution strategy requires an actual NgZone!\\n' +\n    'Please set the value of the executionStrategy property to NoopNgxsExecutionStrategy.\\n' +\n    'NgxsModule.forRoot(states, { executionStrategy: NoopNgxsExecutionStrategy })'\n  );\n}\n\nexport function getUndecoratedStateInIvyWarningMessage(name: string): string {\n  return `'${name}' class should be decorated with @Injectable() right after the @State() decorator`;\n}\n\nexport function throwSelectFactoryNotConnectedError(): never {\n  throw new Error('You have forgotten to import the NGXS module!');\n}\n\nexport function throwPatchingArrayError(): never {\n  throw new Error('Patching arrays is not supported.');\n}\n\nexport function throwPatchingPrimitiveError(): never {\n  throw new Error('Patching primitives is not supported.');\n}\n","import { Inject, Injectable, NgZone, PLATFORM_ID } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\n\nimport { NgxsExecutionStrategy } from './symbols';\nimport { getZoneWarningMessage } from '../configs/messages.config';\n\n@Injectable({ providedIn: 'root' })\nexport class DispatchOutsideZoneNgxsExecutionStrategy implements NgxsExecutionStrategy {\n  constructor(private _ngZone: NgZone, @Inject(PLATFORM_ID) private _platformId: string) {\n    // Caretaker note: we have still left the `typeof` condition in order to avoid\n    // creating a breaking change for projects that still use the View Engine.\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      verifyZoneIsNotNooped(_ngZone);\n    }\n  }\n\n  enter<T>(func: () => T): T {\n    if (isPlatformServer(this._platformId)) {\n      return this.runInsideAngular(func);\n    }\n    return this.runOutsideAngular(func);\n  }\n\n  leave<T>(func: () => T): T {\n    return this.runInsideAngular(func);\n  }\n\n  private runInsideAngular<T>(func: () => T): T {\n    if (NgZone.isInAngularZone()) {\n      return func();\n    }\n    return this._ngZone.run(func);\n  }\n\n  private runOutsideAngular<T>(func: () => T): T {\n    if (NgZone.isInAngularZone()) {\n      return this._ngZone.runOutsideAngular(func);\n    }\n    return func();\n  }\n}\n\n// Caretaker note: this should exist as a separate function and not a class method,\n// since class methods are not tree-shakable.\nfunction verifyZoneIsNotNooped(ngZone: NgZone): void {\n  // `NoopNgZone` is not exposed publicly as it doesn't expect\n  // to be used outside of the core Angular code, thus we just have\n  // to check if the zone doesn't extend or instanceof `NgZone`.\n  if (ngZone instanceof NgZone) {\n    return;\n  }\n\n  console.warn(getZoneWarningMessage());\n}\n","import { Injectable, InjectionToken, Type } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { PlainObject, StateClass } from '@ngxs/store/internals';\nimport { SharedSelectorOptions } from './internal/internals';\nimport { NgxsExecutionStrategy } from './execution/symbols';\nimport { DispatchOutsideZoneNgxsExecutionStrategy } from './execution/dispatch-outside-zone-ngxs-execution-strategy';\nimport { StateToken } from './state-token/state-token';\n\nexport const ROOT_STATE_TOKEN = new InjectionToken<any>('ROOT_STATE_TOKEN');\nexport const FEATURE_STATE_TOKEN = new InjectionToken<any>('FEATURE_STATE_TOKEN');\nexport const NGXS_PLUGINS = new InjectionToken('NGXS_PLUGINS');\n\nexport const META_KEY = 'NGXS_META';\nexport const META_OPTIONS_KEY = 'NGXS_OPTIONS_META';\nexport const SELECTOR_META_KEY = 'NGXS_SELECTOR_META';\n\nexport type NgxsLifeCycle = Partial<NgxsOnChanges> &\n  Partial<NgxsOnInit> &\n  Partial<NgxsAfterBootstrap>;\n\nexport type NgxsPluginFn = (state: any, mutation: any, next: NgxsNextPluginFn) => any;\n\n/**\n * The NGXS config settings.\n */\n@Injectable()\nexport class NgxsConfig {\n  /**\n   * Run in development mode. This will add additional debugging features:\n   * - Object.freeze on the state and actions to guarantee immutability\n   * (default: false)\n   *\n   * Note: this property will be accounted only in development mode when using the Ivy compiler.\n   * It makes sense to use it only during development to ensure there're no state mutations.\n   * When building for production, the Object.freeze will be tree-shaken away.\n   */\n  developmentMode: boolean;\n  compatibility: {\n    /**\n     * Support a strict Content Security Policy.\n     * This will circumvent some optimisations that violate a strict CSP through the use of `new Function(...)`.\n     * (default: false)\n     */\n    strictContentSecurityPolicy: boolean;\n  };\n  /**\n   * Determines the execution context to perform async operations inside. An implementation can be\n   * provided to override the default behaviour where the async operations are run\n   * outside Angular's zone but all observable behaviours of NGXS are run back inside Angular's zone.\n   * These observable behaviours are from:\n   *   `@Select(...)`, `store.select(...)`, `actions.subscribe(...)` or `store.dispatch(...).subscribe(...)`\n   * Every `zone.run` causes Angular to run change detection on the whole tree (`app.tick()`) so of your\n   * application doesn't rely on zone.js running change detection then you can switch to the\n   * `NoopNgxsExecutionStrategy` that doesn't interact with zones.\n   * (default: null)\n   */\n  executionStrategy: Type<NgxsExecutionStrategy>;\n  /**\n   * Defining the default state before module initialization\n   * This is convenient if we need to create a define our own set of states.\n   * @deprecated will be removed after v4\n   * (default: {})\n   */\n  defaultsState: PlainObject = {};\n  /**\n   * Defining shared selector options\n   */\n  selectorOptions: SharedSelectorOptions = {\n    injectContainerState: true, // TODO: default is true in v3, will change in v4\n    suppressErrors: true // TODO: default is true in v3, will change in v4\n  };\n\n  constructor() {\n    this.compatibility = {\n      strictContentSecurityPolicy: false\n    };\n    this.executionStrategy = DispatchOutsideZoneNgxsExecutionStrategy;\n  }\n}\n\nexport type StateOperator<T> = (existing: Readonly<T>) => T;\n\n/**\n * State context provided to the actions in the state.\n */\nexport interface StateContext<T> {\n  /**\n   * Get the current state.\n   */\n  getState(): T;\n\n  /**\n   * Reset the state to a new value.\n   */\n  setState(val: T | StateOperator<T>): T;\n\n  /**\n   * Patch the existing state with the provided value.\n   */\n  patchState(val: Partial<T>): T;\n\n  /**\n   * Dispatch a new action and return the dispatched observable.\n   */\n  dispatch(actions: any | any[]): Observable<void>;\n}\n\nexport type NgxsNextPluginFn = (state: any, mutation: any) => any;\n\n/**\n * Plugin interface\n */\nexport interface NgxsPlugin {\n  /**\n   * Handle the state/action before its submitted to the state handlers.\n   */\n  handle(state: any, action: any, next: NgxsNextPluginFn): any;\n}\n\n/**\n * Options that can be provided to the store.\n */\nexport interface StoreOptions<T> {\n  /**\n   * Name of the state. Required.\n   */\n  name: string | StateToken<T>;\n\n  /**\n   * Default values for the state. If not provided, uses empty object.\n   */\n  defaults?: T;\n\n  /**\n   * Sub states for the given state.\n   */\n  children?: StateClass[];\n}\n\n/**\n * Represents a basic change from a previous to a new value for a single state instance.\n * Passed as a value in a NgxsSimpleChanges object to the ngxsOnChanges hook.\n */\nexport class NgxsSimpleChange<T = any> {\n  constructor(\n    public readonly previousValue: T,\n    public readonly currentValue: T,\n    public readonly firstChange: boolean\n  ) {}\n}\n\n/**\n * On init interface\n */\nexport interface NgxsOnInit {\n  ngxsOnInit(ctx: StateContext<any>): void;\n}\n\n/**\n * On change interface\n */\nexport interface NgxsOnChanges {\n  ngxsOnChanges(change: NgxsSimpleChange): void;\n}\n\n/**\n * After bootstrap interface\n */\nexport interface NgxsAfterBootstrap {\n  ngxsAfterBootstrap(ctx: StateContext<any>): void;\n}\n\nexport type NgxsModuleOptions = Partial<NgxsConfig>;\n\n/** @internal */\ndeclare global {\n  const ngDevMode: boolean;\n}\n","import { Injectable } from '@angular/core';\n\nimport { NgxsExecutionStrategy } from './symbols';\n\n@Injectable({ providedIn: 'root' })\nexport class NoopNgxsExecutionStrategy implements NgxsExecutionStrategy {\n  enter<T>(func: () => T): T {\n    return func();\n  }\n\n  leave<T>(func: () => T): T {\n    return func();\n  }\n}\n","import { InjectionToken, inject, INJECTOR, Type, Éµglobal } from '@angular/core';\n\nimport { NoopNgxsExecutionStrategy } from './noop-ngxs-execution-strategy';\nimport { DispatchOutsideZoneNgxsExecutionStrategy } from './dispatch-outside-zone-ngxs-execution-strategy';\n\n/**\n * The strategy that might be provided by users through `options.executionStrategy`.\n */\nexport const USER_PROVIDED_NGXS_EXECUTION_STRATEGY = new InjectionToken<\n  Type<NgxsExecutionStrategy> | undefined\n>('USER_PROVIDED_NGXS_EXECUTION_STRATEGY');\n\n/*\n * Internal execution strategy injection token\n */\nexport const NGXS_EXECUTION_STRATEGY = new InjectionToken<NgxsExecutionStrategy>(\n  'NGXS_EXECUTION_STRATEGY',\n  {\n    providedIn: 'root',\n    factory: () => {\n      const injector = inject(INJECTOR);\n      const executionStrategy = injector.get(USER_PROVIDED_NGXS_EXECUTION_STRATEGY);\n      return executionStrategy\n        ? injector.get(executionStrategy)\n        : injector.get(\n            typeof Éµglobal.Zone !== 'undefined'\n              ? DispatchOutsideZoneNgxsExecutionStrategy\n              : NoopNgxsExecutionStrategy\n          );\n    }\n  }\n);\n\n/*\n * Execution strategy interface\n */\nexport interface NgxsExecutionStrategy {\n  enter<T>(func: () => T): T;\n  leave<T>(func: () => T): T;\n}\n","/**\n * Returns the type from an action instance/class.\n * @ignore\n */\nexport function getActionTypeFromInstance(action: any): string | undefined {\n  if (action.constructor && action.constructor.type) {\n    return action.constructor.type;\n  } else {\n    return action.type;\n  }\n}\n\n/**\n * Matches a action\n * @ignore\n */\nexport function actionMatcher(action1: any) {\n  const type1 = getActionTypeFromInstance(action1);\n\n  return function(action2: any) {\n    return type1 === getActionTypeFromInstance(action2);\n  };\n}\n\n/**\n * Set a deeply nested value. Example:\n *\n *   setValue({ foo: { bar: { eat: false } } },\n *      'foo.bar.eat', true) //=> { foo: { bar: { eat: true } } }\n *\n * While it traverses it also creates new objects from top down.\n *\n * @ignore\n */\nexport const setValue = (obj: any, prop: string, val: any) => {\n  obj = { ...obj };\n\n  const split = prop.split('.');\n  const lastIndex = split.length - 1;\n\n  split.reduce((acc, part, index) => {\n    if (index === lastIndex) {\n      acc[part] = val;\n    } else {\n      acc[part] = Array.isArray(acc[part]) ? acc[part].slice() : { ...acc[part] };\n    }\n\n    return acc && acc[part];\n  }, obj);\n\n  return obj;\n};\n\n/**\n * Get a deeply nested value. Example:\n *\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\n *\n * @ignore\n */\nexport const getValue = (obj: any, prop: string): any =>\n  prop.split('.').reduce((acc: any, part: string) => acc && acc[part], obj);\n\n/**\n * Simple object check.\n *\n *    isObject({a:1}) //=> true\n *    isObject(1) //=> false\n *\n * @ignore\n */\nexport const isObject = (item: any) => {\n  return item && typeof item === 'object' && !Array.isArray(item);\n};\n\n/**\n * Deep merge two objects.\n *\n *    mergeDeep({a:1, b:{x: 1, y:2}}, {b:{x: 3}, c:4}) //=> {a:1, b:{x:3, y:2}, c:4}\n *\n * @param base base object onto which `sources` will be applied\n */\nexport const mergeDeep = (base: any, ...sources: any[]): any => {\n  if (!sources.length) return base;\n  const source = sources.shift();\n\n  if (isObject(base) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!base[key]) Object.assign(base, { [key]: {} });\n        mergeDeep(base[key], source[key]);\n      } else {\n        Object.assign(base, { [key]: source[key] });\n      }\n    }\n  }\n\n  return mergeDeep(base, ...sources);\n};\n","import { PlainObjectOf, StateClass } from '@ngxs/store/internals';\nimport { Observable } from 'rxjs';\n\nimport {\n  META_KEY,\n  META_OPTIONS_KEY,\n  NgxsConfig,\n  NgxsSimpleChange,\n  SELECTOR_META_KEY,\n  StoreOptions\n} from '../symbols';\nimport { ActionHandlerMetaData } from '../actions/symbols';\nimport { getValue } from '../utils/utils';\n\n// inspired from https://stackoverflow.com/a/43674389\nexport interface StateClassInternal<T = any, U = any> extends StateClass<T> {\n  [META_KEY]?: MetaDataModel;\n  [META_OPTIONS_KEY]?: StoreOptions<U>;\n}\n\nexport type StateKeyGraph = PlainObjectOf<string[]>;\nexport type StatesByName = PlainObjectOf<StateClassInternal>;\n\nexport interface StateOperations<T> {\n  getState(): T;\n\n  setState(val: T): T;\n\n  dispatch(actionOrActions: any | any[]): Observable<void>;\n}\n\nexport interface MetaDataModel {\n  name: string | null;\n  actions: PlainObjectOf<ActionHandlerMetaData[]>;\n  defaults: any;\n  path: string | null;\n  makeRootSelector: SelectorFactory | null;\n  children?: StateClassInternal[];\n}\n\nexport interface RuntimeSelectorContext {\n  getStateGetter(key: any): (state: any) => any;\n  getSelectorOptions(localOptions?: SharedSelectorOptions): SharedSelectorOptions;\n}\n\nexport type SelectFromRootState = (rootState: any) => any;\nexport type SelectorFactory = (runtimeContext: RuntimeSelectorContext) => SelectFromRootState;\n\nexport interface SharedSelectorOptions {\n  injectContainerState?: boolean;\n  suppressErrors?: boolean;\n}\n\nexport interface SelectorMetaDataModel {\n  makeRootSelector: SelectorFactory | null;\n  originalFn: Function | null;\n  containerClass: any;\n  selectorName: string | null;\n  getSelectorOptions: () => SharedSelectorOptions;\n}\n\nexport interface MappedStore {\n  name: string;\n  isInitialised: boolean;\n  actions: PlainObjectOf<ActionHandlerMetaData[]>;\n  defaults: any;\n  instance: any;\n  path: string;\n}\n\nexport interface StatesAndDefaults {\n  defaults: any;\n  states: MappedStore[];\n}\n\nexport interface RootStateDiff<T> {\n  currentAppState: T;\n  newAppState: T;\n}\n\n/**\n * Ensures metadata is attached to the class and returns it.\n *\n * @ignore\n */\nexport function ensureStoreMetadata(target: StateClassInternal): MetaDataModel {\n  if (!target.hasOwnProperty(META_KEY)) {\n    const defaultMetadata: MetaDataModel = {\n      name: null,\n      actions: {},\n      defaults: {},\n      path: null,\n      makeRootSelector(context: RuntimeSelectorContext) {\n        return context.getStateGetter(defaultMetadata.name);\n      },\n      children: []\n    };\n\n    Object.defineProperty(target, META_KEY, { value: defaultMetadata });\n  }\n  return getStoreMetadata(target);\n}\n\n/**\n * Get the metadata attached to the state class if it exists.\n *\n * @ignore\n */\nexport function getStoreMetadata(target: StateClassInternal): MetaDataModel {\n  return target[META_KEY]!;\n}\n\n/**\n * Ensures metadata is attached to the selector and returns it.\n *\n * @ignore\n */\nexport function ensureSelectorMetadata(target: Function): SelectorMetaDataModel {\n  if (!target.hasOwnProperty(SELECTOR_META_KEY)) {\n    const defaultMetadata: SelectorMetaDataModel = {\n      makeRootSelector: null,\n      originalFn: null,\n      containerClass: null,\n      selectorName: null,\n      getSelectorOptions: () => ({})\n    };\n\n    Object.defineProperty(target, SELECTOR_META_KEY, { value: defaultMetadata });\n  }\n\n  return getSelectorMetadata(target);\n}\n\n/**\n * Get the metadata attached to the selector if it exists.\n *\n * @ignore\n */\nexport function getSelectorMetadata(target: any): SelectorMetaDataModel {\n  return target[SELECTOR_META_KEY];\n}\n\n/**\n * Get a deeply nested value. Example:\n *\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\n *\n * Note: This is not as fast as the `fastPropGetter` but is strict Content Security Policy compliant.\n * See perf hit: https://jsperf.com/fast-value-getter-given-path/1\n *\n * @ignore\n */\nfunction compliantPropGetter(paths: string[]): (x: any) => any {\n  const copyOfPaths = paths.slice();\n  return obj => copyOfPaths.reduce((acc: any, part: string) => acc && acc[part], obj);\n}\n\n/**\n * The generated function is faster than:\n * - pluck (Observable operator)\n * - memoize\n *\n * @ignore\n */\nfunction fastPropGetter(paths: string[]): (x: any) => any {\n  const segments = paths;\n  let seg = 'store.' + segments[0];\n  let i = 0;\n  const l = segments.length;\n\n  let expr = seg;\n  while (++i < l) {\n    expr = expr + ' && ' + (seg = seg + '.' + segments[i]);\n  }\n\n  const fn = new Function('store', 'return ' + expr + ';');\n\n  return <(x: any) => any>fn;\n}\n\n/**\n * Get a deeply nested value. Example:\n *\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\n *\n * @ignore\n */\nexport function propGetter(paths: string[], config: NgxsConfig) {\n  if (config && config.compatibility && config.compatibility.strictContentSecurityPolicy) {\n    return compliantPropGetter(paths);\n  } else {\n    return fastPropGetter(paths);\n  }\n}\n\n/**\n * Given an array of states, it will return a object graph. Example:\n *    const states = [\n *      Cart,\n *      CartSaved,\n *      CartSavedItems\n *    ]\n *\n * would return:\n *\n *  const graph = {\n *    cart: ['saved'],\n *    saved: ['items'],\n *    items: []\n *  };\n *\n * @ignore\n */\nexport function buildGraph(stateClasses: StateClassInternal[]): StateKeyGraph {\n  const findName = (stateClass: StateClassInternal) => {\n    const meta = stateClasses.find(g => g === stateClass);\n\n    // Caretaker note: we have still left the `typeof` condition in order to avoid\n    // creating a breaking change for projects that still use the View Engine.\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !meta) {\n      throw new Error(\n        `Child state not found: ${stateClass}. \\r\\nYou may have forgotten to add states to module`\n      );\n    }\n\n    return meta![META_KEY]!.name!;\n  };\n\n  return stateClasses.reduce<StateKeyGraph>(\n    (result: StateKeyGraph, stateClass: StateClassInternal) => {\n      const { name, children } = stateClass[META_KEY]!;\n      result[name!] = (children || []).map(findName);\n      return result;\n    },\n    {}\n  );\n}\n\n/**\n * Given a states array, returns object graph\n * returning the name and state metadata. Example:\n *\n *  const graph = {\n *    cart: { metadata }\n *  };\n *\n * @ignore\n */\nexport function nameToState(states: StateClassInternal[]): PlainObjectOf<StateClassInternal> {\n  return states.reduce<PlainObjectOf<StateClassInternal>>(\n    (result: PlainObjectOf<StateClassInternal>, stateClass: StateClassInternal) => {\n      const meta = stateClass[META_KEY]!;\n      result[meta.name!] = stateClass;\n      return result;\n    },\n    {}\n  );\n}\n\n/**\n * Given a object relationship graph will return the full path\n * for the child items. Example:\n *\n *  const graph = {\n *    cart: ['saved'],\n *    saved: ['items'],\n *    items: []\n *  };\n *\n * would return:\n *\n *  const r = {\n *    cart: 'cart',\n *    saved: 'cart.saved',\n *    items: 'cart.saved.items'\n *  };\n *\n * @ignore\n */\nexport function findFullParentPath(\n  obj: StateKeyGraph,\n  newObj: PlainObjectOf<string> = {}\n): PlainObjectOf<string> {\n  const visit = (child: StateKeyGraph, keyToFind: string): string | null => {\n    for (const key in child) {\n      if (child.hasOwnProperty(key) && child[key].indexOf(keyToFind) >= 0) {\n        const parent = visit(child, key);\n        return parent !== null ? `${parent}.${key}` : key;\n      }\n    }\n    return null;\n  };\n\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      const parent = visit(obj, key);\n      newObj[key] = parent ? `${parent}.${key}` : key;\n    }\n  }\n\n  return newObj;\n}\n\n/**\n * Given a object graph, it will return the items topologically sorted Example:\n *\n *  const graph = {\n *    cart: ['saved'],\n *    saved: ['items'],\n *    items: []\n *  };\n *\n * would return:\n *\n *  const results = [\n *    'items',\n *    'saved',\n *    'cart'\n *  ];\n *\n * @ignore\n */\nexport function topologicalSort(graph: StateKeyGraph): string[] {\n  const sorted: string[] = [];\n  const visited: PlainObjectOf<boolean> = {};\n\n  const visit = (name: string, ancestors: string[] = []) => {\n    if (!Array.isArray(ancestors)) {\n      ancestors = [];\n    }\n\n    ancestors.push(name);\n    visited[name] = true;\n\n    graph[name].forEach((dep: string) => {\n      // Caretaker note: we have still left the `typeof` condition in order to avoid\n      // creating a breaking change for projects that still use the View Engine.\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && ancestors.indexOf(dep) >= 0) {\n        throw new Error(\n          `Circular dependency '${dep}' is required by '${name}': ${ancestors.join(' -> ')}`\n        );\n      }\n\n      if (visited[dep]) {\n        return;\n      }\n\n      visit(dep, ancestors.slice(0));\n    });\n\n    if (sorted.indexOf(name) < 0) {\n      sorted.push(name);\n    }\n  };\n\n  Object.keys(graph).forEach(k => visit(k));\n\n  return sorted.reverse();\n}\n\n/**\n * Returns if the parameter is a object or not.\n *\n * @ignore\n */\nexport function isObject(obj: any) {\n  return (typeof obj === 'object' && obj !== null) || typeof obj === 'function';\n}\n\nexport function getStateDiffChanges<T>(\n  mappedStore: MappedStore,\n  diff: RootStateDiff<T>\n): NgxsSimpleChange {\n  const previousValue: T = getValue(diff.currentAppState, mappedStore.path);\n  const currentValue: T = getValue(diff.newAppState, mappedStore.path);\n  return new NgxsSimpleChange(previousValue, currentValue, !mappedStore.isInitialised);\n}\n","import { OperatorFunction, Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { ActionType } from '../actions/symbols';\nimport { getActionTypeFromInstance } from '../utils/utils';\nimport { ActionContext, ActionStatus } from '../actions-stream';\n\nexport interface ActionCompletion<T = any, E = Error> {\n  action: T;\n  result: {\n    successful: boolean;\n    canceled: boolean;\n    error?: E;\n  };\n}\n\nexport function ofAction<T = any>(allowedType: ActionType): OperatorFunction<ActionContext, T>;\nexport function ofAction<T = any>(\n  ...allowedTypes: ActionType[]\n): OperatorFunction<ActionContext, T>;\n\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will grab actions that have just been dispatched as well as actions that have completed\n */\nexport function ofAction(...allowedTypes: ActionType[]): OperatorFunction<ActionContext, any> {\n  return ofActionOperator(allowedTypes);\n}\n\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will ONLY grab actions that have just been dispatched\n */\nexport function ofActionDispatched(\n  ...allowedTypes: ActionType[]\n): OperatorFunction<ActionContext, any> {\n  return ofActionOperator(allowedTypes, [ActionStatus.Dispatched]);\n}\n\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will ONLY grab actions that have just been successfully completed\n */\nexport function ofActionSuccessful(\n  ...allowedTypes: ActionType[]\n): OperatorFunction<ActionContext, any> {\n  return ofActionOperator(allowedTypes, [ActionStatus.Successful]);\n}\n\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will ONLY grab actions that have just been canceled\n */\nexport function ofActionCanceled(\n  ...allowedTypes: ActionType[]\n): OperatorFunction<ActionContext, any> {\n  return ofActionOperator(allowedTypes, [ActionStatus.Canceled]);\n}\n\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will ONLY grab actions that have just been completed\n */\nexport function ofActionCompleted(\n  ...allowedTypes: ActionType[]\n): OperatorFunction<ActionContext, ActionCompletion> {\n  const allowedStatuses = [\n    ActionStatus.Successful,\n    ActionStatus.Canceled,\n    ActionStatus.Errored\n  ];\n  return ofActionOperator(allowedTypes, allowedStatuses, mapActionResult);\n}\n\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will ONLY grab actions that have just thrown an error\n */\nexport function ofActionErrored(\n  ...allowedTypes: ActionType[]\n): OperatorFunction<ActionContext, any> {\n  return ofActionOperator(allowedTypes, [ActionStatus.Errored]);\n}\n\nfunction ofActionOperator(\n  allowedTypes: ActionType[],\n  statuses?: ActionStatus[],\n  // This actually could've been `OperatorFunction<ActionContext, ActionCompletion | any>`,\n  // since it maps either to `ctx.action` OR to `ActionCompletion`. But `ActionCompleteion | any`\n  // defaults to `any`, thus there is no sense from union type.\n  mapOperator: () => OperatorFunction<ActionContext, any> = mapAction\n): OperatorFunction<ActionContext, any> {\n  const allowedMap = createAllowedActionTypesMap(allowedTypes);\n  const allowedStatusMap = statuses && createAllowedStatusesMap(statuses);\n  return function(o: Observable<ActionContext>) {\n    return o.pipe(filterStatus(allowedMap, allowedStatusMap), mapOperator());\n  };\n}\n\nfunction filterStatus(allowedTypes: FilterMap, allowedStatuses?: FilterMap) {\n  return filter((ctx: ActionContext) => {\n    const actionType = getActionTypeFromInstance(ctx.action)!;\n    const typeMatch = allowedTypes[actionType];\n    const statusMatch = allowedStatuses ? allowedStatuses[ctx.status] : true;\n    return typeMatch && statusMatch;\n  });\n}\n\nfunction mapActionResult(): OperatorFunction<ActionContext, ActionCompletion> {\n  return map(({ action, status, error }: ActionContext) => {\n    return <ActionCompletion>{\n      action,\n      result: {\n        successful: ActionStatus.Successful === status,\n        canceled: ActionStatus.Canceled === status,\n        error\n      }\n    };\n  });\n}\n\nfunction mapAction<T = any>(): OperatorFunction<ActionContext, T> {\n  return map((ctx: ActionContext) => <T>ctx.action);\n}\n\ninterface FilterMap {\n  [key: string]: boolean;\n}\n\nfunction createAllowedActionTypesMap(types: ActionType[]): FilterMap {\n  return types.reduce((filterMap: FilterMap, klass: any) => {\n    filterMap[getActionTypeFromInstance(klass)!] = true;\n    return filterMap;\n  }, <FilterMap>{});\n}\n\nfunction createAllowedStatusesMap(statuses: ActionStatus[]): FilterMap {\n  return statuses.reduce((filterMap: FilterMap, status: ActionStatus) => {\n    filterMap[status] = true;\n    return filterMap;\n  }, <FilterMap>{});\n}\n","import { MonoTypeOperatorFunction, Observable, Observer } from 'rxjs';\nimport { NgxsExecutionStrategy } from '../execution/symbols';\n\n/**\n * Returns operator that will run\n * `subscribe` outside of the ngxs execution context\n */\nexport function leaveNgxs<T>(\n  ngxsExecutionStrategy: NgxsExecutionStrategy\n): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    return new Observable((sink: Observer<T>) => {\n      return source.subscribe({\n        next(value) {\n          ngxsExecutionStrategy.leave(() => sink.next(value));\n        },\n        error(error) {\n          ngxsExecutionStrategy.leave(() => sink.error(error));\n        },\n        complete() {\n          ngxsExecutionStrategy.leave(() => sink.complete());\n        }\n      });\n    });\n  };\n}\n","import { Injectable, Inject } from '@angular/core';\n\nimport { NgxsExecutionStrategy, NGXS_EXECUTION_STRATEGY } from './symbols';\n\n@Injectable()\nexport class InternalNgxsExecutionStrategy implements NgxsExecutionStrategy {\n  constructor(\n    @Inject(NGXS_EXECUTION_STRATEGY) private _executionStrategy: NgxsExecutionStrategy\n  ) {}\n\n  enter<T>(func: () => T): T {\n    return this._executionStrategy.enter(func);\n  }\n\n  leave<T>(func: () => T): T {\n    return this._executionStrategy.leave(func);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\n\nimport { leaveNgxs } from './operators/leave-ngxs';\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\n\n/**\n * Status of a dispatched action\n */\nexport const enum ActionStatus {\n  Dispatched = 'DISPATCHED',\n  Successful = 'SUCCESSFUL',\n  Canceled = 'CANCELED',\n  Errored = 'ERRORED'\n}\n\nexport interface ActionContext<T = any> {\n  status: ActionStatus;\n  action: T;\n  error?: Error;\n}\n\n/**\n * Custom Subject that ensures that subscribers are notified of values in the order that they arrived.\n * A standard Subject does not have this guarantee.\n * For example, given the following code:\n * ```typescript\n *   const subject = new Subject<string>();\n     subject.subscribe(value => {\n       if (value === 'start') subject.next('end');\n     });\n     subject.subscribe(value => { });\n     subject.next('start');\n * ```\n * When `subject` is a standard `Subject<T>` the second subscriber would recieve `end` and then `start`.\n * When `subject` is a `OrderedSubject<T>` the second subscriber would recieve `start` and then `end`.\n */\nexport class OrderedSubject<T> extends Subject<T> {\n  private _itemQueue: T[] = [];\n  private _busyPushingNext = false;\n\n  next(value?: T): void {\n    if (this._busyPushingNext) {\n      this._itemQueue.unshift(value!);\n      return;\n    }\n    this._busyPushingNext = true;\n    super.next(value);\n    while (this._itemQueue.length > 0) {\n      const nextValue = this._itemQueue.pop();\n      super.next(nextValue);\n    }\n    this._busyPushingNext = false;\n  }\n}\n\n/**\n * Internal Action stream that is emitted anytime an action is dispatched.\n */\n@Injectable()\nexport class InternalActions extends OrderedSubject<ActionContext> {}\n\n/**\n * Action stream that is emitted anytime an action is dispatched.\n *\n * You can listen to this in services to react without stores.\n */\n@Injectable()\nexport class Actions extends Observable<any> {\n  // This has to be `Observable<ActionContext>` in the v4. Because `InternalActions`\n  // is a `Subject<ActionContext>`. Leave it as `any` to avoid breaking changes\n  constructor(\n    internalActions$: InternalActions,\n    internalExecutionStrategy: InternalNgxsExecutionStrategy\n  ) {\n    super(observer => {\n      const childSubscription = internalActions$\n        .pipe(leaveNgxs(internalExecutionStrategy))\n        .subscribe({\n          next: ctx => observer.next(ctx),\n          error: error => observer.error(error),\n          complete: () => observer.complete()\n        });\n\n      observer.add(childSubscription);\n    });\n  }\n}\n","export type StateFn = (...args: any[]) => any;\n\n/**\n * Composes a array of functions from left to right. Example:\n *\n *      compose([fn, final])(state, action);\n *\n * then the funcs have a signature like:\n *\n *      function fn (state, action, next) {\n *          console.log('here', state, action, next);\n *          return next(state, action);\n *      }\n *\n *      function final (state, action) {\n *          console.log('here', state, action);\n *          return state;\n *      }\n *\n * the last function should not call `next`.\n *\n * @ignore\n */\nexport const compose = (funcs: StateFn[]) => (...args: any[]) => {\n  const curr = funcs.shift()!;\n  return curr(...args, (...nextArgs: any[]) => compose(funcs)(...nextArgs));\n};\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { PlainObject } from '@ngxs/store/internals';\n\n/**\n * BehaviorSubject of the entire state.\n * @ignore\n */\n@Injectable()\nexport class StateStream extends BehaviorSubject<PlainObject> implements OnDestroy {\n  constructor() {\n    super({});\n  }\n\n  ngOnDestroy(): void {\n    // The `StateStream` should never emit values once the root view is removed, e.g. when the `NgModuleRef.destroy()` is called.\n    // This will eliminate memory leaks in server-side rendered apps where the `StateStream` is created per each HTTP request, users\n    // might forget to unsubscribe from `store.select` or `store.subscribe`, thus this will lead to huge memory leaks in SSR apps.\n    this.complete();\n  }\n}\n","import { Inject, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { NGXS_PLUGINS, NgxsPlugin, NgxsPluginFn } from './symbols';\n\n@Injectable()\nexport class PluginManager {\n  public plugins: NgxsPluginFn[] = [];\n\n  constructor(\n    @Optional()\n    @SkipSelf()\n    private _parentManager: PluginManager,\n    @Inject(NGXS_PLUGINS)\n    @Optional()\n    private _pluginHandlers: NgxsPlugin[]\n  ) {\n    this.registerHandlers();\n  }\n\n  private get rootPlugins(): NgxsPluginFn[] {\n    return (this._parentManager && this._parentManager.plugins) || this.plugins;\n  }\n\n  private registerHandlers(): void {\n    const pluginHandlers: NgxsPluginFn[] = this.getPluginHandlers();\n    this.rootPlugins.push(...pluginHandlers);\n  }\n\n  private getPluginHandlers(): NgxsPluginFn[] {\n    const handlers: NgxsPlugin[] = this._pluginHandlers || [];\n    return handlers.map(\n      (plugin: NgxsPlugin) =>\n        (plugin.handle ? plugin.handle.bind(plugin) : plugin) as NgxsPluginFn\n    );\n  }\n}\n","import { ErrorHandler, Injectable, Injector } from '@angular/core';\nimport { EMPTY, forkJoin, Observable, of, Subject, throwError } from 'rxjs';\nimport { exhaustMap, filter, shareReplay, take } from 'rxjs/operators';\n\nimport { compose } from '../utils/compose';\nimport { ActionContext, ActionStatus, InternalActions } from '../actions-stream';\nimport { StateStream } from './state-stream';\nimport { PluginManager } from '../plugin-manager';\nimport { InternalNgxsExecutionStrategy } from '../execution/internal-ngxs-execution-strategy';\nimport { leaveNgxs } from '../operators/leave-ngxs';\nimport { getActionTypeFromInstance } from '../utils/utils';\n\n/**\n * Internal Action result stream that is emitted when an action is completed.\n * This is used as a method of returning the action result to the dispatcher\n * for the observable returned by the dispatch(...) call.\n * The dispatcher then asynchronously pushes the result from this stream onto the main action stream as a result.\n */\n@Injectable()\nexport class InternalDispatchedActionResults extends Subject<ActionContext> {}\n\n@Injectable()\nexport class InternalDispatcher {\n  private _errorHandler: ErrorHandler;\n\n  constructor(\n    private _injector: Injector,\n    private _actions: InternalActions,\n    private _actionResults: InternalDispatchedActionResults,\n    private _pluginManager: PluginManager,\n    private _stateStream: StateStream,\n    private _ngxsExecutionStrategy: InternalNgxsExecutionStrategy\n  ) {}\n\n  /**\n   * Dispatches event(s).\n   */\n  dispatch(actionOrActions: any | any[]): Observable<any> {\n    const result = this._ngxsExecutionStrategy.enter(() =>\n      this.dispatchByEvents(actionOrActions)\n    );\n\n    result.subscribe({\n      error: error =>\n        this._ngxsExecutionStrategy.leave(() => {\n          try {\n            // Retrieve lazily to avoid cyclic dependency exception\n            this._errorHandler = this._errorHandler || this._injector.get(ErrorHandler);\n            this._errorHandler.handleError(error);\n          } catch {}\n        })\n    });\n\n    return result.pipe(leaveNgxs(this._ngxsExecutionStrategy));\n  }\n\n  private dispatchByEvents(actionOrActions: any | any[]): Observable<any> {\n    if (Array.isArray(actionOrActions)) {\n      if (actionOrActions.length === 0) return of(this._stateStream.getValue());\n      return forkJoin(actionOrActions.map(action => this.dispatchSingle(action)));\n    } else {\n      return this.dispatchSingle(actionOrActions);\n    }\n  }\n\n  private dispatchSingle(action: any): Observable<any> {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      const type: string | undefined = getActionTypeFromInstance(action);\n      if (!type) {\n        const error = new Error(\n          `This action doesn't have a type property: ${action.constructor.name}`\n        );\n        return throwError(error);\n      }\n    }\n\n    const prevState = this._stateStream.getValue();\n    const plugins = this._pluginManager.plugins;\n\n    return (compose([\n      ...plugins,\n      (nextState: any, nextAction: any) => {\n        if (nextState !== prevState) {\n          this._stateStream.next(nextState);\n        }\n        const actionResult$ = this.getActionResultStream(nextAction);\n        actionResult$.subscribe(ctx => this._actions.next(ctx));\n        this._actions.next({ action: nextAction, status: ActionStatus.Dispatched });\n        return this.createDispatchObservable(actionResult$);\n      }\n    ])(prevState, action) as Observable<any>).pipe(shareReplay());\n  }\n\n  private getActionResultStream(action: any): Observable<ActionContext> {\n    return this._actionResults.pipe(\n      filter(\n        (ctx: ActionContext) => ctx.action === action && ctx.status !== ActionStatus.Dispatched\n      ),\n      take(1),\n      shareReplay()\n    );\n  }\n\n  private createDispatchObservable(actionResult$: Observable<ActionContext>): Observable<any> {\n    return actionResult$\n      .pipe(\n        exhaustMap((ctx: ActionContext) => {\n          switch (ctx.status) {\n            case ActionStatus.Successful:\n              return of(this._stateStream.getValue());\n            case ActionStatus.Errored:\n              return throwError(ctx.error);\n            default:\n              return EMPTY;\n          }\n        })\n      )\n      .pipe(shareReplay());\n  }\n}\n","/**\n * Object freeze code\n * https://github.com/jsdf/deep-freeze\n */\nexport const deepFreeze = (o: any) => {\n  Object.freeze(o);\n\n  const oIsFunction = typeof o === 'function';\n  const hasOwnProp = Object.prototype.hasOwnProperty;\n\n  Object.getOwnPropertyNames(o).forEach(function(prop) {\n    if (\n      hasOwnProp.call(o, prop) &&\n      (oIsFunction ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments' : true) &&\n      o[prop] !== null &&\n      (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\n      !Object.isFrozen(o[prop])\n    ) {\n      deepFreeze(o[prop]);\n    }\n  });\n\n  return o;\n};\n","import { Injectable } from '@angular/core';\n\nimport { StateOperations, StatesAndDefaults } from '../internal/internals';\nimport { InternalDispatcher } from '../internal/dispatcher';\nimport { StateStream } from './state-stream';\nimport { NgxsConfig } from '../symbols';\nimport { deepFreeze } from '../utils/freeze';\n\n/**\n * State Context factory class\n * @ignore\n */\n@Injectable()\nexport class InternalStateOperations {\n  constructor(\n    private _stateStream: StateStream,\n    private _dispatcher: InternalDispatcher,\n    private _config: NgxsConfig\n  ) {}\n\n  /**\n   * Returns the root state operators.\n   */\n  getRootStateOperations(): StateOperations<any> {\n    const rootStateOperations = {\n      getState: () => this._stateStream.getValue(),\n      setState: (newState: any) => this._stateStream.next(newState),\n      dispatch: (actionOrActions: any | any[]) => this._dispatcher.dispatch(actionOrActions)\n    };\n\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      return this._config.developmentMode\n        ? ensureStateAndActionsAreImmutable(rootStateOperations)\n        : rootStateOperations;\n    } else {\n      return rootStateOperations;\n    }\n  }\n\n  setStateToTheCurrentWithNew(results: StatesAndDefaults): void {\n    const stateOperations: StateOperations<any> = this.getRootStateOperations();\n\n    // Get our current stream\n    const currentState = stateOperations.getState();\n    // Set the state to the current + new\n    stateOperations.setState({ ...currentState, ...results.defaults });\n  }\n}\n\nfunction ensureStateAndActionsAreImmutable(root: StateOperations<any>): StateOperations<any> {\n  return {\n    getState: () => root.getState(),\n    setState: value => {\n      const frozenValue = deepFreeze(value);\n      return root.setState(frozenValue);\n    },\n    dispatch: actions => {\n      return root.dispatch(actions);\n    }\n  };\n}\n","import {\n  throwPatchingArrayError,\n  throwPatchingPrimitiveError\n} from '../configs/messages.config';\nimport { StateOperator } from '../symbols';\n\nexport function simplePatch<T>(val: Partial<T>): StateOperator<T> {\n  return (existingState: Readonly<T>) => {\n    if (Array.isArray(val)) {\n      throwPatchingArrayError();\n    } else if (typeof val !== 'object') {\n      throwPatchingPrimitiveError();\n    }\n\n    const newState: any = { ...(existingState as any) };\n    for (const key in val) {\n      // deep clone for patch compatibility\n      // noinspection JSUnfilteredForInLoop (IDE)\n      newState[key] = (val as any)[key];\n    }\n\n    return newState as T;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { NgxsLifeCycle, NgxsSimpleChange, StateContext, StateOperator } from '../symbols';\nimport { getStateDiffChanges, MappedStore } from '../internal/internals';\nimport { setValue, getValue } from '../utils/utils';\nimport { InternalStateOperations } from '../internal/state-operations';\nimport { simplePatch } from './state-operators';\n\n/**\n * State Context factory class\n * @ignore\n */\n@Injectable()\nexport class StateContextFactory {\n  constructor(private _internalStateOperations: InternalStateOperations) {}\n\n  /**\n   * Create the state context\n   */\n  createStateContext<T>(mappedStore: MappedStore): StateContext<T> {\n    const root = this._internalStateOperations.getRootStateOperations();\n\n    function getState(currentAppState: any): T {\n      return getValue(currentAppState, mappedStore.path);\n    }\n\n    function setStateValue(currentAppState: any, newValue: T): any {\n      const newAppState = setValue(currentAppState, mappedStore.path, newValue);\n      const instance: NgxsLifeCycle = mappedStore.instance;\n\n      if (instance.ngxsOnChanges) {\n        const change: NgxsSimpleChange = getStateDiffChanges<T>(mappedStore, {\n          currentAppState,\n          newAppState\n        });\n\n        instance.ngxsOnChanges(change);\n      }\n\n      root.setState(newAppState);\n      return newAppState;\n      // In doing this refactoring I noticed that there is a 'bug' where the\n      // application state is returned instead of this state slice.\n      // This has worked this way since the beginning see:\n      // https://github.com/ngxs/store/blame/324c667b4b7debd8eb979006c67ca0ae347d88cd/src/state-factory.ts\n      // This needs to be fixed, but is a 'breaking' change.\n      // I will do this fix in a subsequent PR and we can decide how to handle it.\n    }\n\n    function setStateFromOperator(currentAppState: any, stateOperator: StateOperator<T>) {\n      const local = getState(currentAppState);\n      const newValue = stateOperator(local);\n      return setStateValue(currentAppState, newValue);\n    }\n\n    function isStateOperator(value: T | StateOperator<T>): value is StateOperator<T> {\n      return typeof value === 'function';\n    }\n\n    return {\n      getState(): T {\n        const currentAppState = root.getState();\n        return getState(currentAppState);\n      },\n      patchState(val: Partial<T>): T {\n        const currentAppState = root.getState();\n        const patchOperator = simplePatch<T>(val);\n        return setStateFromOperator(currentAppState, patchOperator);\n      },\n      setState(val: T | StateOperator<T>): T {\n        const currentAppState = root.getState();\n        return isStateOperator(val)\n          ? setStateFromOperator(currentAppState, val)\n          : setStateValue(currentAppState, val);\n      },\n      dispatch(actions: any | any[]): Observable<void> {\n        return root.dispatch(actions);\n      }\n    };\n  }\n}\n","import { getStoreMetadata, StateClassInternal, StatesByName } from '../internal/internals';\nimport {\n  throwStateDecoratorError,\n  throwStateNameError,\n  throwStateNamePropertyError,\n  throwStateUniqueError\n} from '../configs/messages.config';\n\nexport abstract class StoreValidators {\n  private static stateNameRegex: RegExp = new RegExp('^[a-zA-Z0-9_]+$');\n\n  static checkThatStateIsNamedCorrectly(name: string | null): void | never {\n    if (!name) {\n      throwStateNamePropertyError();\n    } else if (!this.stateNameRegex.test(name)) {\n      throwStateNameError(name);\n    }\n  }\n\n  static checkThatStateNameIsUnique(\n    stateName: string,\n    state: StateClassInternal,\n    statesByName: StatesByName\n  ): void | never {\n    const existingState = statesByName[stateName];\n    if (existingState && existingState !== state) {\n      throwStateUniqueError(stateName, state.name, existingState.name);\n    }\n  }\n\n  static checkThatStateClassesHaveBeenDecorated(\n    stateClasses: StateClassInternal[]\n  ): void | never {\n    stateClasses.forEach((stateClass: StateClassInternal) => {\n      if (!getStoreMetadata(stateClass)) {\n        throwStateDecoratorError(stateClass.name);\n      }\n    });\n  }\n}\n","import { ÉµivyEnabled } from '@angular/core';\n\nimport { getUndecoratedStateInIvyWarningMessage } from '../configs/messages.config';\n\n/**\n * All provided or injected tokens must have `@Injectable` decorator\n * (previously, injected tokens without `@Injectable` were allowed\n * if another decorator was used, e.g. pipes).\n */\nexport function ensureStateClassIsInjectable(stateClass: any): void {\n  // `Éµprov` is a static property added by the NGCC compiler. It always exists in\n  // AOT mode because this property is added before runtime. If an application is running in\n  // JIT mode then this property can be added by the `@Injectable()` decorator. The `@Injectable()`\n  // decorator has to go after the `@State()` decorator, thus we prevent users from unwanted DI errors.\n  if (ÉµivyEnabled) {\n    const ngInjectableDef = stateClass.Éµprov;\n    if (!ngInjectableDef) {\n      // Don't warn if Ivy is disabled or `Éµprov` exists on the class\n      console.warn(getUndecoratedStateInIvyWarningMessage(stateClass.name));\n    }\n  }\n}\n","import { Injectable, Injector, Optional, SkipSelf, Inject, OnDestroy } from '@angular/core';\nimport { forkJoin, from, Observable, of, throwError, Subscription, Subject } from 'rxjs';\nimport {\n  catchError,\n  defaultIfEmpty,\n  filter,\n  map,\n  mergeMap,\n  shareReplay,\n  takeUntil\n} from 'rxjs/operators';\nimport { INITIAL_STATE_TOKEN, PlainObjectOf, memoize } from '@ngxs/store/internals';\n\nimport { META_KEY, NgxsConfig } from '../symbols';\nimport {\n  buildGraph,\n  findFullParentPath,\n  isObject,\n  MappedStore,\n  MetaDataModel,\n  nameToState,\n  propGetter,\n  StateClassInternal,\n  StateKeyGraph,\n  StatesAndDefaults,\n  StatesByName,\n  topologicalSort,\n  RuntimeSelectorContext,\n  SharedSelectorOptions,\n  getStoreMetadata\n} from './internals';\nimport { getActionTypeFromInstance, getValue, setValue } from '../utils/utils';\nimport { ofActionDispatched } from '../operators/of-action';\nimport { ActionContext, ActionStatus, InternalActions } from '../actions-stream';\nimport { InternalDispatchedActionResults } from '../internal/dispatcher';\nimport { StateContextFactory } from '../internal/state-context-factory';\nimport { StoreValidators } from '../utils/store-validators';\nimport { ensureStateClassIsInjectable } from '../ivy/ivy-enabled-in-dev-mode';\n\n/**\n * State factory class\n * @ignore\n */\n@Injectable()\nexport class StateFactory implements OnDestroy {\n  private _actionsSubscription: Subscription | null = null;\n\n  constructor(\n    private _injector: Injector,\n    private _config: NgxsConfig,\n    @Optional()\n    @SkipSelf()\n    private _parentFactory: StateFactory,\n    private _actions: InternalActions,\n    private _actionResults: InternalDispatchedActionResults,\n    private _stateContextFactory: StateContextFactory,\n    @Optional()\n    @Inject(INITIAL_STATE_TOKEN)\n    private _initialState: any\n  ) {}\n\n  private _states: MappedStore[] = [];\n\n  get states(): MappedStore[] {\n    return this._parentFactory ? this._parentFactory.states : this._states;\n  }\n\n  private _statesByName: StatesByName = {};\n\n  get statesByName(): StatesByName {\n    return this._parentFactory ? this._parentFactory.statesByName : this._statesByName;\n  }\n\n  private _statePaths: PlainObjectOf<string> = {};\n\n  private get statePaths(): PlainObjectOf<string> {\n    return this._parentFactory ? this._parentFactory.statePaths : this._statePaths;\n  }\n\n  getRuntimeSelectorContext = memoize(() => {\n    const stateFactory = this;\n\n    function resolveGetter(key: string) {\n      const path = stateFactory.statePaths[key];\n      return path ? propGetter(path.split('.'), stateFactory._config) : null;\n    }\n\n    const context: RuntimeSelectorContext = this._parentFactory\n      ? this._parentFactory.getRuntimeSelectorContext()\n      : {\n          getStateGetter(key: string) {\n            let getter = resolveGetter(key);\n            if (getter) {\n              return getter;\n            }\n            return (...args) => {\n              // Late loaded getter\n              if (!getter) {\n                getter = resolveGetter(key);\n              }\n              return getter ? getter(...args) : undefined;\n            };\n          },\n          getSelectorOptions(localOptions?: SharedSelectorOptions) {\n            const globalSelectorOptions = stateFactory._config.selectorOptions;\n            return {\n              ...globalSelectorOptions,\n              ...(localOptions || {})\n            };\n          }\n        };\n    return context;\n  });\n\n  private static cloneDefaults(defaults: any): any {\n    let value = {};\n\n    if (Array.isArray(defaults)) {\n      value = defaults.slice();\n    } else if (isObject(defaults)) {\n      value = { ...defaults };\n    } else if (defaults === undefined) {\n      value = {};\n    } else {\n      value = defaults;\n    }\n\n    return value;\n  }\n\n  ngOnDestroy(): void {\n    // I'm using non-null assertion here since `_actionsSubscrition` will\n    // be 100% defined. This is because `ngOnDestroy()` cannot be invoked\n    // on the `StateFactory` until its initialized :) An it's initialized\n    // for the first time along with the `NgxsRootModule`.\n    this._actionsSubscription!.unsubscribe();\n  }\n\n  /**\n   * Add a new state to the global defs.\n   */\n  add(stateClasses: StateClassInternal[]): MappedStore[] {\n    // Caretaker note: we have still left the `typeof` condition in order to avoid\n    // creating a breaking change for projects that still use the View Engine.\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      StoreValidators.checkThatStateClassesHaveBeenDecorated(stateClasses);\n    }\n\n    const { newStates } = this.addToStatesMap(stateClasses);\n    if (!newStates.length) return [];\n\n    const stateGraph: StateKeyGraph = buildGraph(newStates);\n    const sortedStates: string[] = topologicalSort(stateGraph);\n    const paths: PlainObjectOf<string> = findFullParentPath(stateGraph);\n    const nameGraph: PlainObjectOf<StateClassInternal> = nameToState(newStates);\n    const bootstrappedStores: MappedStore[] = [];\n\n    for (const name of sortedStates) {\n      const stateClass: StateClassInternal = nameGraph[name];\n      const path: string = paths[name];\n      const meta: MetaDataModel = stateClass[META_KEY]!;\n\n      this.addRuntimeInfoToMeta(meta, path);\n\n      // Note: previously we called `ensureStateClassIsInjectable` within the\n      // `State` decorator. This check is moved here because the `Éµprov` property\n      // will not exist on the class in JIT mode (because it's set asynchronously\n      // during JIT compilation through `Object.defineProperty`).\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        ensureStateClassIsInjectable(stateClass);\n      }\n\n      const stateMap: MappedStore = {\n        name,\n        path,\n        isInitialised: false,\n        actions: meta.actions,\n        instance: this._injector.get(stateClass),\n        defaults: StateFactory.cloneDefaults(meta.defaults)\n      };\n\n      // ensure our store hasn't already been added\n      // but don't throw since it could be lazy\n      // loaded from different paths\n      if (!this.hasBeenMountedAndBootstrapped(name, path)) {\n        bootstrappedStores.push(stateMap);\n      }\n\n      this.states.push(stateMap);\n    }\n\n    return bootstrappedStores;\n  }\n\n  /**\n   * Add a set of states to the store and return the defaults\n   */\n  addAndReturnDefaults(stateClasses: StateClassInternal[]): StatesAndDefaults {\n    const classes: StateClassInternal[] = stateClasses || [];\n\n    const mappedStores: MappedStore[] = this.add(classes);\n    const defaults = mappedStores.reduce(\n      (result: any, mappedStore: MappedStore) =>\n        setValue(result, mappedStore.path, mappedStore.defaults),\n      {}\n    );\n    return { defaults, states: mappedStores };\n  }\n\n  /**\n   * Bind the actions to the handlers\n   */\n  connectActionHandlers() {\n    if (this._actionsSubscription !== null) return;\n    const dispatched$ = new Subject<ActionContext>();\n    this._actionsSubscription = this._actions\n      .pipe(\n        filter((ctx: ActionContext) => ctx.status === ActionStatus.Dispatched),\n        mergeMap(ctx => {\n          dispatched$.next(ctx);\n          const action = ctx.action;\n          return this.invokeActions(dispatched$, action!).pipe(\n            map(() => <ActionContext>{ action, status: ActionStatus.Successful }),\n            defaultIfEmpty(<ActionContext>{ action, status: ActionStatus.Canceled }),\n            catchError(error =>\n              of(<ActionContext>{ action, status: ActionStatus.Errored, error })\n            )\n          );\n        })\n      )\n      .subscribe(ctx => this._actionResults.next(ctx));\n  }\n\n  /**\n   * Invoke actions on the states.\n   */\n  invokeActions(dispatched$: Observable<ActionContext>, action: any) {\n    const type = getActionTypeFromInstance(action)!;\n    const results = [];\n\n    for (const metadata of this.states) {\n      const actionMetas = metadata.actions[type];\n\n      if (actionMetas) {\n        for (const actionMeta of actionMetas) {\n          const stateContext = this._stateContextFactory.createStateContext(metadata);\n          try {\n            let result = metadata.instance[actionMeta.fn](stateContext, action);\n\n            if (result instanceof Promise) {\n              result = from(result);\n            }\n\n            if (result instanceof Observable) {\n              // If this observable has been completed w/o emitting\n              // any value then we wouldn't want to complete the whole chain\n              // of actions. Since if any observable completes then\n              // action will be canceled.\n              // For instance if any action handler would've had such statement:\n              // `handler(ctx) { return EMPTY; }`\n              // then the action will be canceled.\n              // See https://github.com/ngxs/store/issues/1568\n              result = result.pipe(\n                mergeMap((value: any) => {\n                  if (value instanceof Promise) {\n                    return from(value);\n                  }\n                  if (value instanceof Observable) {\n                    return value;\n                  }\n                  return of(value);\n                }),\n                defaultIfEmpty({})\n              );\n\n              if (actionMeta.options.cancelUncompleted) {\n                // todo: ofActionDispatched should be used with action class\n                result = result.pipe(\n                  takeUntil(dispatched$.pipe(ofActionDispatched(action as any)))\n                );\n              }\n            } else {\n              result = of({}).pipe(shareReplay());\n            }\n\n            results.push(result);\n          } catch (e) {\n            results.push(throwError(e));\n          }\n        }\n      }\n    }\n\n    if (!results.length) {\n      results.push(of({}));\n    }\n\n    return forkJoin(results);\n  }\n\n  private addToStatesMap(\n    stateClasses: StateClassInternal[]\n  ): { newStates: StateClassInternal[] } {\n    const newStates: StateClassInternal[] = [];\n    const statesMap: StatesByName = this.statesByName;\n\n    for (const stateClass of stateClasses) {\n      const stateName = getStoreMetadata(stateClass).name!;\n      // Caretaker note: we have still left the `typeof` condition in order to avoid\n      // creating a breaking change for projects that still use the View Engine.\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        StoreValidators.checkThatStateNameIsUnique(stateName, stateClass, statesMap);\n      }\n      const unmountedState = !statesMap[stateName];\n      if (unmountedState) {\n        newStates.push(stateClass);\n        statesMap[stateName] = stateClass;\n      }\n    }\n\n    return { newStates };\n  }\n\n  private addRuntimeInfoToMeta(meta: MetaDataModel, path: string): void {\n    this.statePaths[meta.name!] = path;\n    // TODO: v4 - we plan to get rid of the path property because it is non-deterministic\n    // we can do this when we get rid of the incorrectly exposed getStoreMetadata\n    // We will need to come up with an alternative in v4 because this is used by many plugins\n    meta.path = path;\n  }\n\n  /**\n   * @description\n   * the method checks if the state has already been added to the tree\n   * and completed the life cycle\n   * @param name\n   * @param path\n   */\n  private hasBeenMountedAndBootstrapped(name: string, path: string): boolean {\n    const valueIsBootstrappedInInitialState: boolean =\n      getValue(this._initialState, path) !== undefined;\n    return this.statesByName[name] && valueIsBootstrappedInInitialState;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { NgxsBootstrapper, PlainObject } from '@ngxs/store/internals';\nimport { filter, mergeMap, tap } from 'rxjs/operators';\n\nimport { StateContextFactory } from './state-context-factory';\nimport { InternalStateOperations } from './state-operations';\nimport { getStateDiffChanges, MappedStore, StatesAndDefaults } from './internals';\nimport { NgxsLifeCycle, NgxsSimpleChange, StateContext } from '../symbols';\n\n@Injectable()\nexport class LifecycleStateManager {\n  constructor(\n    private internalStateOperations: InternalStateOperations,\n    private stateContextFactory: StateContextFactory,\n    private bootstrapper: NgxsBootstrapper\n  ) {}\n\n  ngxsBootstrap<T>(action: T, results: StatesAndDefaults | undefined): void {\n    this.internalStateOperations\n      .getRootStateOperations()\n      .dispatch(action)\n      .pipe(\n        filter(() => !!results),\n        tap(() => this.invokeInit(results!.states)),\n        mergeMap(() => this.bootstrapper.appBootstrapped$),\n        filter(appBootstrapped => !!appBootstrapped)\n      )\n      .subscribe(() => this.invokeBootstrap(results!.states));\n  }\n\n  /**\n   * Invoke the init function on the states.\n   */\n  invokeInit(mappedStores: MappedStore[]): void {\n    for (const mappedStore of mappedStores) {\n      const instance: NgxsLifeCycle = mappedStore.instance;\n\n      if (instance.ngxsOnChanges) {\n        const currentAppState: PlainObject = {};\n        const newAppState: PlainObject = this.internalStateOperations\n          .getRootStateOperations()\n          .getState();\n\n        const firstDiffChange: NgxsSimpleChange = getStateDiffChanges(mappedStore, {\n          currentAppState,\n          newAppState\n        });\n\n        instance.ngxsOnChanges(firstDiffChange);\n      }\n\n      if (instance.ngxsOnInit) {\n        instance.ngxsOnInit(this.getStateContext(mappedStore));\n      }\n\n      mappedStore.isInitialised = true;\n    }\n  }\n\n  /**\n   * Invoke the bootstrap function on the states.\n   */\n  invokeBootstrap(mappedStores: MappedStore[]) {\n    for (const mappedStore of mappedStores) {\n      const instance: NgxsLifeCycle = mappedStore.instance;\n      if (instance.ngxsAfterBootstrap) {\n        instance.ngxsAfterBootstrap(this.getStateContext(mappedStore));\n      }\n    }\n  }\n\n  private getStateContext(mappedStore: MappedStore): StateContext<any> {\n    return this.stateContextFactory.createStateContext(mappedStore);\n  }\n}\n","import { memoize } from '@ngxs/store/internals';\n\nimport {\n  ensureSelectorMetadata,\n  getSelectorMetadata,\n  getStoreMetadata,\n  SelectorMetaDataModel,\n  SharedSelectorOptions,\n  RuntimeSelectorContext,\n  SelectorFactory,\n  SelectFromRootState\n} from '../internal/internals';\n\nconst SELECTOR_OPTIONS_META_KEY = 'NGXS_SELECTOR_OPTIONS_META';\n\nexport const selectorOptionsMetaAccessor = {\n  getOptions: (target: any): SharedSelectorOptions => {\n    return (target && (<any>target)[SELECTOR_OPTIONS_META_KEY]) || {};\n  },\n  defineOptions: (target: any, options: SharedSelectorOptions) => {\n    if (!target) return;\n    (<any>target)[SELECTOR_OPTIONS_META_KEY] = options;\n  }\n};\n\ninterface CreationMetadata {\n  containerClass: any;\n  selectorName: string;\n  getSelectorOptions?: () => SharedSelectorOptions;\n}\n\ninterface RuntimeSelectorInfo {\n  selectorOptions: SharedSelectorOptions;\n  argumentSelectorFunctions: SelectFromRootState[];\n}\n\n/**\n * Function for creating a selector\n * @param selectors The selectors to use to create the arguments of this function\n * @param originalFn The original function being made into a selector\n * @param creationMetadata\n */\nexport function createSelector<T extends (...args: any[]) => any>(\n  selectors: any[] | undefined,\n  originalFn: T,\n  creationMetadata?: CreationMetadata\n) {\n  const containerClass = creationMetadata && creationMetadata.containerClass;\n  const wrappedFn = function wrappedSelectorFn(...args: any[]) {\n    const returnValue = originalFn.apply(containerClass, args);\n    if (returnValue instanceof Function) {\n      const innerMemoizedFn = memoize.apply(null, [returnValue]);\n      return innerMemoizedFn;\n    }\n    return returnValue;\n  } as T;\n  const memoizedFn = memoize(wrappedFn);\n  Object.setPrototypeOf(memoizedFn, originalFn);\n\n  const selectorMetaData = setupSelectorMetadata<T>(originalFn, creationMetadata);\n\n  const makeRootSelector: SelectorFactory = (context: RuntimeSelectorContext) => {\n    const { argumentSelectorFunctions, selectorOptions } = getRuntimeSelectorInfo(\n      context,\n      selectorMetaData,\n      selectors\n    );\n\n    return function selectFromRoot(rootState: any) {\n      // Determine arguments from the app state using the selectors\n      const results = argumentSelectorFunctions.map(argFn => argFn(rootState));\n\n      // if the lambda tries to access a something on the\n      // state that doesn't exist, it will throw a TypeError.\n      // since this is quite usual behaviour, we simply return undefined if so.\n      try {\n        return memoizedFn(...results);\n      } catch (ex) {\n        if (ex instanceof TypeError && selectorOptions.suppressErrors) {\n          return undefined;\n        }\n\n        throw ex;\n      }\n    };\n  };\n\n  selectorMetaData.makeRootSelector = makeRootSelector;\n\n  return memoizedFn;\n}\n\nfunction setupSelectorMetadata<T extends (...args: any[]) => any>(\n  originalFn: T,\n  creationMetadata: CreationMetadata | undefined\n) {\n  const selectorMetaData = ensureSelectorMetadata(originalFn);\n  selectorMetaData.originalFn = originalFn;\n  let getExplicitSelectorOptions = () => ({});\n  if (creationMetadata) {\n    selectorMetaData.containerClass = creationMetadata.containerClass;\n    selectorMetaData.selectorName = creationMetadata.selectorName;\n    getExplicitSelectorOptions =\n      creationMetadata.getSelectorOptions || getExplicitSelectorOptions;\n  }\n  const selectorMetaDataClone = { ...selectorMetaData };\n  selectorMetaData.getSelectorOptions = () =>\n    getLocalSelectorOptions(selectorMetaDataClone, getExplicitSelectorOptions());\n  return selectorMetaData;\n}\n\nfunction getRuntimeSelectorInfo(\n  context: RuntimeSelectorContext,\n  selectorMetaData: SelectorMetaDataModel,\n  selectors: any[] | undefined = []\n): RuntimeSelectorInfo {\n  const localSelectorOptions = selectorMetaData.getSelectorOptions();\n  const selectorOptions = context.getSelectorOptions(localSelectorOptions);\n  const selectorsToApply = getSelectorsToApply(\n    selectors,\n    selectorOptions,\n    selectorMetaData.containerClass\n  );\n\n  const argumentSelectorFunctions = selectorsToApply.map(selector => {\n    const factory = getRootSelectorFactory(selector);\n    return factory(context);\n  });\n  return {\n    selectorOptions,\n    argumentSelectorFunctions\n  };\n}\n\nfunction getLocalSelectorOptions(\n  selectorMetaData: SelectorMetaDataModel,\n  explicitOptions: SharedSelectorOptions\n): SharedSelectorOptions {\n  return {\n    ...(selectorOptionsMetaAccessor.getOptions(selectorMetaData.containerClass) || {}),\n    ...(selectorOptionsMetaAccessor.getOptions(selectorMetaData.originalFn) || {}),\n    ...(selectorMetaData.getSelectorOptions() || {}),\n    ...explicitOptions\n  };\n}\n\nfunction getSelectorsToApply(\n  selectors: any[] | undefined = [],\n  selectorOptions: SharedSelectorOptions,\n  containerClass: any\n) {\n  const selectorsToApply = [];\n  const canInjectContainerState =\n    selectors.length === 0 || selectorOptions.injectContainerState;\n  if (containerClass && canInjectContainerState) {\n    // If we are on a state class, add it as the first selector parameter\n    const metadata = getStoreMetadata(containerClass);\n    if (metadata) {\n      selectorsToApply.push(containerClass);\n    }\n  }\n  if (selectors) {\n    selectorsToApply.push(...selectors);\n  }\n  return selectorsToApply;\n}\n\n/**\n * This function gets the factory function to create the selector to get the selected slice from the app state\n * @ignore\n */\nexport function getRootSelectorFactory(selector: any): SelectorFactory {\n  const metadata = getSelectorMetadata(selector) || getStoreMetadata(selector);\n  return (metadata && metadata.makeRootSelector) || (() => selector);\n}\n","// tslint:disable:unified-signatures\nimport { Inject, Injectable, Optional, Type } from '@angular/core';\nimport { Observable, of, Subscription, throwError, queueScheduler } from 'rxjs';\nimport {\n  catchError,\n  distinctUntilChanged,\n  map,\n  shareReplay,\n  take,\n  observeOn\n} from 'rxjs/operators';\nimport { INITIAL_STATE_TOKEN, PlainObject } from '@ngxs/store/internals';\n\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\nimport { InternalStateOperations } from './internal/state-operations';\nimport { getRootSelectorFactory } from './utils/selector-utils';\nimport { StateStream } from './internal/state-stream';\nimport { leaveNgxs } from './operators/leave-ngxs';\nimport { NgxsConfig } from './symbols';\nimport { StateToken } from './state-token/state-token';\nimport { StateFactory } from './internal/state-factory';\n\n@Injectable()\nexport class Store {\n  /**\n   * This is a derived state stream that leaves NGXS execution strategy to emit state changes within the Angular zone,\n   * because state is being changed actually within the `<root>` zone, see `InternalDispatcher#dispatchSingle`.\n   * All selects would use this stream, and it would call leave only once for any state change across all active selectors.\n   */\n  private _selectableStateStream = this._stateStream.pipe(\n    observeOn(queueScheduler),\n    leaveNgxs(this._internalExecutionStrategy),\n    shareReplay({ bufferSize: 1, refCount: true })\n  );\n\n  constructor(\n    private _stateStream: StateStream,\n    private _internalStateOperations: InternalStateOperations,\n    private _config: NgxsConfig,\n    private _internalExecutionStrategy: InternalNgxsExecutionStrategy,\n    private _stateFactory: StateFactory,\n    @Optional()\n    @Inject(INITIAL_STATE_TOKEN)\n    initialStateValue: any\n  ) {\n    this.initStateStream(initialStateValue);\n  }\n\n  /**\n   * Dispatches event(s).\n   */\n  dispatch(actionOrActions: any | any[]): Observable<any> {\n    return this._internalStateOperations.getRootStateOperations().dispatch(actionOrActions);\n  }\n\n  /**\n   * Selects a slice of data from the store.\n   */\n  select<T>(selector: (state: any, ...states: any[]) => T): Observable<T>;\n  select<T = any>(selector: string | Type<any>): Observable<T>;\n  select<T>(selector: StateToken<T>): Observable<T>;\n  select(selector: any): Observable<any> {\n    const selectorFn = this.getStoreBoundSelectorFn(selector);\n    return this._selectableStateStream.pipe(\n      map(selectorFn),\n      catchError((err: Error): Observable<never> | Observable<undefined> => {\n        // if error is TypeError we swallow it to prevent usual errors with property access\n        const { suppressErrors } = this._config.selectorOptions;\n\n        if (err instanceof TypeError && suppressErrors) {\n          return of(undefined);\n        }\n\n        // rethrow other errors\n        return throwError(err);\n      }),\n      distinctUntilChanged(),\n      leaveNgxs(this._internalExecutionStrategy)\n    );\n  }\n\n  /**\n   * Select one slice of data from the store.\n   */\n\n  selectOnce<T>(selector: (state: any, ...states: any[]) => T): Observable<T>;\n  selectOnce<T = any>(selector: string | Type<any>): Observable<T>;\n  selectOnce<T>(selector: StateToken<T>): Observable<T>;\n  selectOnce(selector: any): Observable<any> {\n    return this.select(selector).pipe(take(1));\n  }\n\n  /**\n   * Select a snapshot from the state.\n   */\n  selectSnapshot<T>(selector: (state: any, ...states: any[]) => T): T;\n  selectSnapshot<T = any>(selector: string | Type<any>): T;\n  selectSnapshot<T>(selector: StateToken<T>): T;\n  selectSnapshot(selector: any): any {\n    const selectorFn = this.getStoreBoundSelectorFn(selector);\n    return selectorFn(this._stateStream.getValue());\n  }\n\n  /**\n   * Allow the user to subscribe to the root of the state\n   */\n  subscribe(fn?: (value: any) => void): Subscription {\n    return this._selectableStateStream\n      .pipe(leaveNgxs(this._internalExecutionStrategy))\n      .subscribe(fn);\n  }\n\n  /**\n   * Return the raw value of the state.\n   */\n  snapshot(): any {\n    return this._internalStateOperations.getRootStateOperations().getState();\n  }\n\n  /**\n   * Reset the state to a specific point in time. This method is useful\n   * for plugin's who need to modify the state directly or unit testing.\n   */\n  reset(state: any) {\n    return this._internalStateOperations.getRootStateOperations().setState(state);\n  }\n\n  private getStoreBoundSelectorFn(selector: any) {\n    const makeSelectorFn = getRootSelectorFactory(selector);\n    const runtimeContext = this._stateFactory.getRuntimeSelectorContext();\n    return makeSelectorFn(runtimeContext);\n  }\n\n  private initStateStream(initialStateValue: any): void {\n    const value: PlainObject = this._stateStream.value;\n    const storeIsEmpty: boolean = !value || Object.keys(value).length === 0;\n    if (storeIsEmpty) {\n      const defaultStateNotEmpty: boolean = Object.keys(this._config.defaultsState).length > 0;\n      const storeValues: PlainObject = defaultStateNotEmpty\n        ? { ...this._config.defaultsState, ...initialStateValue }\n        : initialStateValue;\n\n      this._stateStream.next(storeValues);\n    }\n  }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\n\nimport { Store } from '../../store';\nimport { NgxsConfig } from '../../symbols';\n\n/**\n * Allows the select decorator to get access to the DI store, this is used internally\n * in `@Select` decorator.\n */\n@Injectable()\nexport class SelectFactory implements OnDestroy {\n  public static store: Store | null = null;\n  public static config: NgxsConfig | null = null;\n\n  constructor(store: Store, config: NgxsConfig) {\n    SelectFactory.store = store;\n    SelectFactory.config = config;\n  }\n\n  ngOnDestroy(): void {\n    SelectFactory.store = null;\n    SelectFactory.config = null;\n  }\n}\n","import { PlainObject } from '@ngxs/store/internals';\n\n/**\n * Init action\n */\nexport class InitState {\n  static get type() {\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\n    return '@@INIT';\n  }\n}\n\n/**\n * Update action\n */\nexport class UpdateState {\n  static get type() {\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\n    return '@@UPDATE_STATE';\n  }\n\n  constructor(public addedStates?: PlainObject) {}\n}\n","import { Inject, NgModule, Optional } from '@angular/core';\n\nimport { StateFactory } from '../internal/state-factory';\nimport { InternalStateOperations } from '../internal/state-operations';\nimport { Store } from '../store';\nimport { SelectFactory } from '../decorators/select/select-factory';\nimport { ROOT_STATE_TOKEN } from '../symbols';\nimport { StateClassInternal, StatesAndDefaults } from '../internal/internals';\nimport { LifecycleStateManager } from '../internal/lifecycle-state-manager';\nimport { InitState } from '../actions/actions';\n\n/**\n * Root module\n * @ignore\n */\n@NgModule()\nexport class NgxsRootModule {\n  constructor(\n    factory: StateFactory,\n    internalStateOperations: InternalStateOperations,\n    _store: Store,\n    _select: SelectFactory,\n    @Optional()\n    @Inject(ROOT_STATE_TOKEN)\n    states: StateClassInternal[] = [],\n    lifecycleStateManager: LifecycleStateManager\n  ) {\n    // Add stores to the state graph and return their defaults\n    const results: StatesAndDefaults = factory.addAndReturnDefaults(states);\n\n    internalStateOperations.setStateToTheCurrentWithNew(results);\n\n    // Connect our actions stream\n    factory.connectActionHandlers();\n\n    // Dispatch the init action and invoke init and bootstrap functions after\n    lifecycleStateManager.ngxsBootstrap(new InitState(), results);\n  }\n}\n","import { Inject, NgModule, Optional } from '@angular/core';\n\nimport { Store } from '../store';\nimport { InternalStateOperations } from '../internal/state-operations';\nimport { StateFactory } from '../internal/state-factory';\nimport { FEATURE_STATE_TOKEN } from '../symbols';\nimport { LifecycleStateManager } from '../internal/lifecycle-state-manager';\nimport { StateClassInternal, StatesAndDefaults } from '../internal/internals';\nimport { UpdateState } from '../actions/actions';\n\n/**\n * Feature module\n * @ignore\n */\n@NgModule()\nexport class NgxsFeatureModule {\n  constructor(\n    _store: Store,\n    internalStateOperations: InternalStateOperations,\n    factory: StateFactory,\n    @Optional()\n    @Inject(FEATURE_STATE_TOKEN)\n    states: StateClassInternal[][] = [],\n    lifecycleStateManager: LifecycleStateManager\n  ) {\n    // Since FEATURE_STATE_TOKEN is a multi token, we need to\n    // flatten it [[Feature1State, Feature2State], [Feature3State]]\n    const flattenedStates: StateClassInternal[] = NgxsFeatureModule.flattenStates(states);\n\n    // add stores to the state graph and return their defaults\n    const results: StatesAndDefaults = factory.addAndReturnDefaults(flattenedStates);\n\n    if (results.states.length) {\n      internalStateOperations.setStateToTheCurrentWithNew(results);\n\n      // dispatch the update action and invoke init and bootstrap functions after\n      lifecycleStateManager.ngxsBootstrap(new UpdateState(results.defaults), results);\n    }\n  }\n\n  private static flattenStates(states: StateClassInternal[][] = []): StateClassInternal[] {\n    return states.reduce(\n      (total: StateClassInternal[], values: StateClassInternal[]) => total.concat(values),\n      []\n    );\n  }\n}\n","import {\n  APP_BOOTSTRAP_LISTENER,\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  Provider\n} from '@angular/core';\nimport {\n  INITIAL_STATE_TOKEN,\n  InitialState,\n  NGXS_STATE_CONTEXT_FACTORY,\n  NGXS_STATE_FACTORY,\n  NgxsBootstrapper,\n  StateClass\n} from '@ngxs/store/internals';\n\nimport {\n  FEATURE_STATE_TOKEN,\n  NgxsConfig,\n  NgxsModuleOptions,\n  ROOT_STATE_TOKEN\n} from './symbols';\nimport { USER_PROVIDED_NGXS_EXECUTION_STRATEGY } from './execution/symbols';\nimport { StateFactory } from './internal/state-factory';\nimport { StateContextFactory } from './internal/state-context-factory';\nimport { Actions, InternalActions } from './actions-stream';\nimport { LifecycleStateManager } from './internal/lifecycle-state-manager';\nimport { InternalDispatchedActionResults, InternalDispatcher } from './internal/dispatcher';\nimport { InternalStateOperations } from './internal/state-operations';\nimport { Store } from './store';\nimport { SelectFactory } from './decorators/select/select-factory';\nimport { StateStream } from './internal/state-stream';\nimport { PluginManager } from './plugin-manager';\nimport { NgxsRootModule } from './modules/ngxs-root.module';\nimport { NgxsFeatureModule } from './modules/ngxs-feature.module';\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\nimport { mergeDeep } from './utils/utils';\n\n/**\n * Ngxs Module\n */\n@NgModule()\nexport class NgxsModule {\n  private static readonly ROOT_OPTIONS = new InjectionToken<NgxsModuleOptions>('ROOT_OPTIONS');\n\n  /**\n   * Root module factory\n   */\n  public static forRoot(\n    states: StateClass[] = [],\n    options: NgxsModuleOptions = {}\n  ): ModuleWithProviders<NgxsRootModule> {\n    return {\n      ngModule: NgxsRootModule,\n      providers: [\n        StateFactory,\n        StateContextFactory,\n        Actions,\n        InternalActions,\n        NgxsBootstrapper,\n        LifecycleStateManager,\n        InternalDispatcher,\n        InternalDispatchedActionResults,\n        InternalStateOperations,\n        InternalNgxsExecutionStrategy,\n        Store,\n        StateStream,\n        SelectFactory,\n        PluginManager,\n        ...states,\n        ...NgxsModule.ngxsTokenProviders(states, options)\n      ]\n    };\n  }\n\n  /**\n   * Feature module factory\n   */\n  public static forFeature(states: StateClass[] = []): ModuleWithProviders<NgxsFeatureModule> {\n    return {\n      ngModule: NgxsFeatureModule,\n      providers: [\n        StateFactory,\n        PluginManager,\n        ...states,\n        {\n          provide: FEATURE_STATE_TOKEN,\n          multi: true,\n          useValue: states\n        }\n      ]\n    };\n  }\n\n  private static ngxsTokenProviders(\n    states: StateClass[],\n    options: NgxsModuleOptions\n  ): Provider[] {\n    return [\n      {\n        provide: USER_PROVIDED_NGXS_EXECUTION_STRATEGY,\n        useValue: options.executionStrategy\n      },\n      {\n        provide: ROOT_STATE_TOKEN,\n        useValue: states\n      },\n      {\n        provide: NgxsModule.ROOT_OPTIONS,\n        useValue: options\n      },\n      {\n        provide: NgxsConfig,\n        useFactory: NgxsModule.ngxsConfigFactory,\n        deps: [NgxsModule.ROOT_OPTIONS]\n      },\n      {\n        provide: APP_BOOTSTRAP_LISTENER,\n        useFactory: NgxsModule.appBootstrapListenerFactory,\n        multi: true,\n        deps: [NgxsBootstrapper]\n      },\n      {\n        provide: INITIAL_STATE_TOKEN,\n        useFactory: NgxsModule.getInitialState\n      },\n      {\n        provide: NGXS_STATE_CONTEXT_FACTORY,\n        useExisting: StateContextFactory\n      },\n      {\n        provide: NGXS_STATE_FACTORY,\n        useExisting: StateFactory\n      }\n    ];\n  }\n\n  private static ngxsConfigFactory(options: NgxsModuleOptions): NgxsConfig {\n    return mergeDeep(new NgxsConfig(), options);\n  }\n\n  private static appBootstrapListenerFactory(bootstrapper: NgxsBootstrapper): Function {\n    return () => bootstrapper.bootstrap();\n  }\n\n  private static getInitialState() {\n    return InitialState.pop();\n  }\n}\n","import { ensureStoreMetadata } from '../internal/internals';\nimport { ActionType, ActionOptions } from '../actions/symbols';\nimport { throwActionDecoratorError } from '../configs/messages.config';\n\n/**\n * Decorates a method with a action information.\n */\nexport function Action(\n  actions: ActionType | ActionType[],\n  options?: ActionOptions\n): MethodDecorator {\n  return (target: any, name: string | symbol): void => {\n    // Caretaker note: we have still left the `typeof` condition in order to avoid\n    // creating a breaking change for projects that still use the View Engine.\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      const isStaticMethod = target.hasOwnProperty('prototype');\n\n      if (isStaticMethod) {\n        throwActionDecoratorError();\n      }\n    }\n\n    const meta = ensureStoreMetadata(target.constructor);\n\n    if (!Array.isArray(actions)) {\n      actions = [actions];\n    }\n\n    for (const action of actions) {\n      const type = action.type;\n\n      if (!meta.actions[type]) {\n        meta.actions[type] = [];\n      }\n\n      meta.actions[type].push({\n        fn: name,\n        options: options || {},\n        type\n      });\n    }\n  };\n}\n","import { StateClass } from '@ngxs/store/internals';\n\nimport { ensureStoreMetadata, MetaDataModel, StateClassInternal } from '../internal/internals';\nimport { META_KEY, META_OPTIONS_KEY, StoreOptions } from '../symbols';\nimport { StoreValidators } from '../utils/store-validators';\n\ninterface MutateMetaOptions<T> {\n  meta: MetaDataModel;\n  inheritedStateClass: StateClassInternal;\n  optionsWithInheritance: StoreOptions<T>;\n}\n\n/**\n * Decorates a class with ngxs state information.\n */\nexport function State<T>(options: StoreOptions<T>) {\n  function getStateOptions(inheritedStateClass: StateClassInternal): StoreOptions<T> {\n    const inheritanceOptions: Partial<StoreOptions<T>> =\n      inheritedStateClass[META_OPTIONS_KEY] || {};\n    return { ...inheritanceOptions, ...options } as StoreOptions<T>;\n  }\n\n  function mutateMetaData(params: MutateMetaOptions<T>): void {\n    const { meta, inheritedStateClass, optionsWithInheritance } = params;\n    const { children, defaults, name } = optionsWithInheritance;\n    const stateName: string | null =\n      typeof name === 'string' ? name : (name && name.getName()) || null;\n\n    // Caretaker note: we have still left the `typeof` condition in order to avoid\n    // creating a breaking change for projects that still use the View Engine.\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      StoreValidators.checkThatStateIsNamedCorrectly(stateName);\n    }\n\n    if (inheritedStateClass.hasOwnProperty(META_KEY)) {\n      const inheritedMeta: Partial<MetaDataModel> = inheritedStateClass[META_KEY] || {};\n      meta.actions = { ...meta.actions, ...inheritedMeta.actions };\n    }\n\n    meta.children = children;\n    meta.defaults = defaults;\n    meta.name = stateName;\n  }\n\n  return (target: StateClass): void => {\n    const stateClass: StateClassInternal = target;\n    const meta: MetaDataModel = ensureStoreMetadata(stateClass);\n    const inheritedStateClass: StateClassInternal = Object.getPrototypeOf(stateClass);\n    const optionsWithInheritance: StoreOptions<T> = getStateOptions(inheritedStateClass);\n    mutateMetaData({ meta, inheritedStateClass, optionsWithInheritance });\n    stateClass[META_OPTIONS_KEY] = optionsWithInheritance;\n  };\n}\n","import { Observable } from 'rxjs';\n\nimport { propGetter } from '../../internal/internals';\nimport { SelectFactory } from './select-factory';\nimport { StateToken } from '../../state-token/state-token';\nimport { ExtractTokenType } from '../../state-token/symbols';\nimport { throwSelectFactoryNotConnectedError } from '../../configs/messages.config';\n\nconst DOLLAR_CHAR_CODE = 36;\n\nexport function createSelectObservable<T = any>(selector: any): Observable<T> {\n  if (!SelectFactory.store) {\n    throwSelectFactoryNotConnectedError();\n  }\n  return SelectFactory.store!.select(selector);\n}\n\nexport function createSelectorFn(name: string, rawSelector?: any, paths: string[] = []): any {\n  rawSelector = !rawSelector ? removeDollarAtTheEnd(name) : rawSelector;\n\n  if (typeof rawSelector === 'string') {\n    const propsArray: string[] = paths.length\n      ? [rawSelector, ...paths]\n      : rawSelector.split('.');\n    return propGetter(propsArray, SelectFactory.config!);\n  }\n\n  return rawSelector;\n}\n\n/**\n * @example If `foo$` => make it just `foo`\n */\nexport function removeDollarAtTheEnd(name: string): string {\n  const lastCharIndex: number = name.length - 1;\n  const dollarAtTheEnd: boolean = name.charCodeAt(lastCharIndex) === DOLLAR_CHAR_CODE;\n  return dollarAtTheEnd ? name.slice(0, lastCharIndex) : name;\n}\n\nexport type PropertyType<T> = T extends StateToken<any>\n  ? Observable<ExtractTokenType<T>>\n  : T extends (...args: any[]) => any\n  ? Observable<ReturnType<T>>\n  : any;\n","import { createSelectObservable, createSelectorFn, PropertyType } from './symbols';\n\n/**\n * Decorator for selecting a slice of state from the store.\n */\nexport function Select<T>(rawSelector?: T, ...paths: string[]): PropertyDecorator {\n  return function(target, key): void {\n    const name: string = key.toString();\n    const selectorId = `__${name}__selector`;\n    const selector = createSelectorFn(name, rawSelector, paths);\n\n    Object.defineProperties(target, {\n      [selectorId]: {\n        writable: true,\n        enumerable: false,\n        configurable: true\n      },\n      [name]: {\n        enumerable: true,\n        configurable: true,\n        get(): PropertyType<T> {\n          return this[selectorId] || (this[selectorId] = createSelectObservable(selector));\n        }\n      }\n    });\n  };\n}\n","import { SharedSelectorOptions } from '../internal/internals';\nimport { selectorOptionsMetaAccessor } from '../utils/selector-utils';\n\n/**\n * Decorator for setting selector options at a method or class level.\n */\nexport function SelectorOptions(options: SharedSelectorOptions) {\n  return <ClassDecorator & MethodDecorator>(\n    function decorate<T>(\n      target: any,\n      methodName: string,\n      descriptor: TypedPropertyDescriptor<T>\n    ) {\n      if (methodName) {\n        // Method Decorator\n        const originalFn = descriptor.value || (<any>descriptor).originalFn;\n        if (originalFn) {\n          selectorOptionsMetaAccessor.defineOptions(originalFn, options);\n        }\n      } else {\n        // Class Decorator\n        selectorOptionsMetaAccessor.defineOptions(target, options);\n      }\n    }\n  );\n}\n","import {\n  getSelectorMetadata as getSelectorMetadataInternal,\n  getStoreMetadata as getStoreMetadataInternal,\n  ensureStoreMetadata as ensureStoreMetadataInternal,\n  ensureSelectorMetadata as ensureSelectorMetadataInternal,\n  StateClassInternal,\n  SharedSelectorOptions\n} from './internal/internals';\nimport { PlainObjectOf } from '../internals/src/symbols';\nimport { ActionHandlerMetaData } from './actions/symbols';\n\ninterface MetaDataModel {\n  name: string | null;\n  actions: PlainObjectOf<ActionHandlerMetaData[]>;\n  defaults: any;\n  path: string | null;\n  // selectFromAppState: SelectFromState | null;\n  // makeRootSelector: SelectorFactory | null; // Don't expose new stuff\n  children?: StateClassInternal[];\n}\n\ninterface SelectorMetaDataModel {\n  // selectFromAppState: SelectFromState | null;\n  // makeRootSelector: SelectorFactory | null; // Don't expose new stuff\n  originalFn: Function | null;\n  containerClass: any;\n  selectorName: string | null;\n  getSelectorOptions: () => SharedSelectorOptions;\n}\n\nexport function ensureStoreMetadata(target: StateClassInternal<any, any>): MetaDataModel {\n  return ensureStoreMetadataInternal(target);\n}\n\nexport function getStoreMetadata(target: StateClassInternal<any, any>): MetaDataModel {\n  return getStoreMetadataInternal(target);\n}\n\nexport function ensureSelectorMetadata(target: Function): SelectorMetaDataModel {\n  return ensureSelectorMetadataInternal(target);\n}\n\nexport function getSelectorMetadata(target: any): SelectorMetaDataModel {\n  return getSelectorMetadataInternal(target);\n}\n","import { throwSelectorDecoratorError } from '../../configs/messages.config';\nimport { createSelector } from '../../utils/selector-utils';\nimport { SelectorSpec, SelectorType } from './symbols';\n\n/**\n * Decorator for memoizing a state selector.\n */\nexport function Selector<T>(selectors?: T[]): SelectorType<T> {\n  return <U>(\n    target: any,\n    key: string | symbol,\n    descriptor: TypedPropertyDescriptor<SelectorSpec<T, U>>\n  ): TypedPropertyDescriptor<SelectorSpec<T, U>> | void => {\n    // Caretaker note: we have still left the `typeof` condition in order to avoid\n    // creating a breaking change for projects that still use the View Engine.\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      const isNotMethod = !(descriptor && descriptor.value !== null);\n\n      if (isNotMethod) {\n        throwSelectorDecoratorError();\n      }\n    }\n\n    const originalFn = descriptor.value;\n    const memoizedFn = createSelector(selectors, originalFn as any, {\n      containerClass: target,\n      selectorName: key.toString(),\n      getSelectorOptions() {\n        return {};\n      }\n    });\n    const newDescriptor = {\n      configurable: true,\n      get() {\n        return memoizedFn;\n      }\n    };\n    // Add hidden property to descriptor\n    (<any>newDescriptor)['originalFn'] = originalFn;\n    return newDescriptor;\n  };\n}\n","import { TokenName } from './symbols';\nimport {\n  ensureSelectorMetadata,\n  RuntimeSelectorContext,\n  SelectFromRootState\n} from '../internal/internals';\n\nexport class StateToken<T = void> {\n  constructor(private readonly name: TokenName<T>) {\n    const selectorMetadata = ensureSelectorMetadata(<any>this);\n    selectorMetadata.makeRootSelector = (\n      runtimeContext: RuntimeSelectorContext\n    ): SelectFromRootState => {\n      return runtimeContext.getStateGetter(this.name);\n    };\n  }\n\n  getName(): string {\n    return this.name;\n  }\n\n  toString(): string {\n    return `StateToken[${this.name}]`;\n  }\n}\n"]}